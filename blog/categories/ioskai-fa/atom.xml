<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类：ios开发 | 冷漠叻荭颜’s Blog]]></title>
  <link href="http://lengmolehongyan.github.io/blog/categories/ioskai-fa/atom.xml" rel="self"/>
  <link href="http://lengmolehongyan.github.io/"/>
  <updated>2015-05-26T22:23:47+08:00</updated>
  <id>http://lengmolehongyan.github.io/</id>
  <author>
    <name><![CDATA[lengmolehongyan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Swift基础语法学习]]></title>
    <link href="http://lengmolehongyan.github.io/blog/swiftji-chu-yu-fa-xue-xi.html/"/>
    <updated>2015-05-26T22:12:42+08:00</updated>
    <id>http://lengmolehongyan.github.io/blog/swiftji-chu-yu-fa-xue-xi</id>
    <content type="html"><![CDATA[<h3>变量和常量</h3>

<ul>
<li><code>var</code><strong>变量</strong>，可以修改的</li>
<li><code>let</code><strong>常量</strong>，一经定义不能修改</li>
<li>在swift开发中，通常先定义常量<code>let</code>，只有必须修改的时候，再改成<code>var</code></li>
</ul>


<pre><code class="swift">// 实例化一个UIView对象 保存在堆中
let view = UIView(frame: CGRectMake(0, 0, 100, 100))
// 修改的是view的属性 并没有修改view本身的地址
view.backgroudColor = UIColor.redColor()
</code></pre>

<ul>
<li>注意点:

<ul>
<li>swift是一个对变量类型要求及其严格的语言</li>
<li>任何数据类型之间，都不能隐式转换，如果要在不同类型之间进行计算，必须转换格式</li>
<li>整数的格式是<code>Int</code>对应于OC中的<code>long</code>(64位的)，小数的格式是<code>Double</code>，OC中默认的小数格式<code>CGFloat</code></li>
<li>数据类型的推导是在给变量设置初始值的时候，根据“右边”来判断的</li>
<li>在真正初始化的时候，才能决定变量的准确类型</li>
</ul>
</li>
<li>在定义变量的时候，可以直接指定变量的类型，便于后续的计算不需要转换</li>
</ul>


<pre><code class="swift">let a: Double = 10
let b = 10.5
let c = a + b
</code></pre>

<hr />

<h3>分支</h3>

<ul>
<li><code>if</code>在C语言中有一个特点:非零即真，在swift中，没有非零即真的概念，只有<code>true/false</code>，在编写分支语句时，必须准确的指定条件的真假。</li>
<li>格式:

<ul>
<li>条件不需要括号</li>
<li>必须要有<code>{}</code></li>
</ul>
</li>
<li><code>convenience init?()</code>表示一个函数未必能够真的实例化出来一个对象，在swift中，要求在编写代码的时候，必须考虑这些问题，能够尽早地发现问题</li>
</ul>


<pre><code class="swift">// 使用if同时设置数值
if let url = NSURL(string: "http://www.baidu.com/s?word=he") {
    // 代码执行到此 url就一定有值 所以不需要再使用!
    let request = NSURLRequest(URL: url)
}
</code></pre>

<ul>
<li>实际的应用技巧:

<ul>
<li><code>?</code>表示可以有值，也可以没有值</li>
<li>打印可选项的时候，同时会输出一个<code>Optional</code>，提示开发者，这是一个可选项，苹果把判断对象是否有内容的工作交给了程序员</li>
<li><code>??</code>用来快速判断对象是否为<code>nil</code></li>
</ul>
</li>
</ul>


<pre><code class="swift">var str: NSString
str = "hello"
let a = 10
// 存在的风险 如果str没有设置初始值 会直接崩溃
// let len = a + str!.length
// ?? 用来快速判断对象是否为nil
let len2 = a + (str?.length ?? 0)
</code></pre>

<hr />

<h3>循环</h3>

<ul>
<li>传统的写法，和C语言几乎一样，需要注意的是，需要使用<code>var</code>而不是<code>let</code></li>
</ul>


<pre><code class="swift">for var i = 0; i &lt; 10; i++ {
    println(i)
}
</code></pre>

<ul>
<li>方便写法，<code>in</code>用来指定范围</li>
</ul>


<pre><code class="swift">// 范围0~9
for i in 0..&lt;10 {
    println(i)
}
// 范围0~10
for i in 0...10 {
    println(i)
}
</code></pre>

<ul>
<li>如果遍历的时候，对索引下标不关注，在swift中，<code>_</code>使用的非常广泛，主要用于忽略</li>
</ul>


<pre><code class="swift">for _ in 0...5 {
    println("hello")
}
</code></pre>

<hr />

<h3>字符串</h3>

<ul>
<li>在swift中，<strong>字符串</strong>默认的类型是<code>String</code>，而不是<code>NSString</code></li>
<li>swift中<code>String</code>是一个结构体，执行效率更高，支持快速遍历。<code>NSString</code>继承自<code>NSObject</code>，是一个OC对象，不支持快速遍历</li>
</ul>


<pre><code class="swift">let str = "Hello!"
// 对字符串的快速遍历
for c in str {
    println(c)
}
</code></pre>

<ul>
<li>字符串的拼接</li>
</ul>


<pre><code class="swift">let str1 = "Hello"
let str2 = str1 + "World!"
</code></pre>

<ul>
<li>格式字符串</li>
</ul>


<pre><code class="swift">let str = String(format: "%02d:%02d:%02d", arguments: [1, 2, 3])
</code></pre>

<ul>
<li>在swift中，如果要结合<code>range</code>一起使用字符串，建议先转成<code>NSString</code>再处理</li>
</ul>


<pre><code class="swift">let str: NSString = "Hello, world!"
let subS = str.substringWithRange(NSMakeRange(1, 3))
</code></pre>

<hr />

<h3>数组</h3>

<ul>
<li>使用<code>[]</code>定义<strong>数组</strong>，数组类型由中括号里面元素决定</li>
<li>OC中数组分为可变数组和不可变数组，swift中<code>let</code>是不可变的，<code>var</code>是可变的，不能向不可变数组中追加元素</li>
<li>数组遍历:</li>
</ul>


<pre><code class="swift">// 数组遍历
let array = ["name", "age", "no"]
for str in array {
    println(str)
}
</code></pre>

<ul>
<li>可变数组添加元素</li>
</ul>


<pre><code class="swift">var arrayM = ["name", "age"]
arrayM.append("no")
</code></pre>

<ul>
<li>如果定义数组时，指定的对象类型不一致，定义的数组类型是<code>[NSObject]</code>。OC中，如果要向数组中添加数字，需要转换成<code>NSNumber</code>，swift中，可以直接添加</li>
<li>数组的定义和初始化</li>
</ul>


<pre><code class="swift">// 定义但是没有初始化
var arrayM: [String]
// 初始化一个字符串的可变数组
arrayM = [String]()
arrayM.append("name")
</code></pre>

<hr />

<h3>字典</h3>

<ul>
<li>定义一个<strong>字典</strong>，仍然使用<code>[]</code>，在目前的swift版本中，定义字典通常使用<code>[String: NSObject]</code>，大多数情况下，<code>key</code>的类型是固定的</li>
<li><code>let</code>是不可变的，<code>var</code>是可变的</li>
<li>如果<code>key</code>已经存在，利用这个<code>key</code>设置数据时，会覆盖之前的值</li>
<li>字典的特性:<code>key</code>是不允许重复的</li>
<li>字典的遍历:</li>
</ul>


<pre><code class="swift">// 定义并且实例化字典
var dict1 = [String: NSObject]()
dict1["name"] = "zhangsan"
dict1["age"] = 20
// 注意:k, v可以随便写，但是，前面是key，后面是value
for (kk, vv) in dict1 {
    println("\(kk), \(vv)")
}
</code></pre>

<hr />

<h3>函数</h3>

<ul>
<li><strong>函数</strong>的定义格式:

<ul>
<li><code>func 函数名(参数列表) -&gt; 返回值 {// 代码实现}</code></li>
<li><code>-&gt;</code>是swift特有的，表示前面的执行结果，输出给后面的</li>
<li>强制填写参数，使用<code>#</code>，可以在调用的时候，会让代码提示更直观</li>
</ul>
</li>
<li>如果没有返回值<code>-&gt; 返回值</code>可以省略，下面三种方式等价

<ul>
<li><code>-&gt; Void</code></li>
<li><code>-&gt; ()</code></li>
<li>完全忽略</li>
</ul>
</li>
</ul>


<pre><code class="swift">// 定义函数
func sum(#a: Int, #b: Int) -&gt; Int {
    return a + b
}
// 函数调用
sum(a: 10, b: 20)
</code></pre>

<hr />

<h3>闭包</h3>

<ul>
<li><strong>闭包</strong>和OC中的<code>block</code>类似，但是OC中的<code>block</code>是一个匿名函数，swift中<strong>函数</strong>是<strong>闭包</strong>的一个特例</li>
<li>闭包的使用，几乎和OC中的<code>block</code>是一样的

<ul>
<li>提前准备好代码</li>
<li>在需要的时候执行</li>
</ul>
</li>
<li>闭包的格式:

<ul>
<li><code>{ (参数) -&gt; () in // 准备执行的代码实现 }</code></li>
<li><code>in</code>是定义和代码实现之间的分隔</li>
</ul>
</li>
<li>闭包的简写:

<ul>
<li>如果闭包是最后一个参数，可以进行简化</li>
<li>称为“尾随闭包”</li>
</ul>
</li>
</ul>


<pre><code class="swift">override func viewDidLoad() {
        super.viewDidLoad()
        demo(10, completion: {(str) -&gt; () in
            println("回调后\(str)")
        })
    }

func demo(a: Int, completion:(str: String) -&gt; ()) {
        println("回调前\(a)")
        // 执行回调
        completion(str: "\(a)")
}
// 输出回调前10 回调后10
</code></pre>

<ul>
<li>闭包的<strong>返回值</strong></li>
</ul>


<pre><code class="swift">override func viewDidLoad() {
   super.viewDidLoad()
   demo { () -&gt; Int in
       return 20
   }
   // 输出行高20
}

func demo(rowH:() -&gt; Int) {
   let rowH = rowH()
   println("行高\(rowH)")
}
</code></pre>

<ul>
<li>定义<strong>闭包属性</strong>的时候，有两种选择

<ul>
<li>直接设置初始值</li>
<li>设置一个可选项<code>?</code></li>
</ul>
</li>
</ul>


<pre><code class="swift">// 定义方式 表示闭包可以为空
var completion: (()-&gt;())?
</code></pre>

<ul>
<li>闭包的<strong>循环引用</strong>

<ul>
<li><code>block</code>中出现<code>self</code>的时候，为了保证代码安全，在定义闭包的时候，需要对外部变量进行拷贝</li>
<li>OC中解决循环引用的办法<code>__weak typeof(self) weakSelf = self</code></li>
<li>在swift中，如果直接访问属性数值，可以省略<code>self.</code></li>
<li>swift中默认都是强引用，如果需要弱引用，可以使用<code>weak</code>修饰符号</li>
<li>在闭包中，必须要明确的使用<code>self</code>，因为闭包是提前准备的代码，不知道什么时候会执行</li>
<li>在OC中判断是否有循环引用，使用<code>-dealloc</code>方法，在swift中<code>deinit</code>叫做<strong>析构函数</strong>，就是在对象被释放前执行，与OC中的<code>-dealloc</code>方法类似</li>
</ul>
</li>
</ul>


<pre><code class="swift">weak var weakSelf = self
demo4 {
    // 使用?的好处 就是一旦 self 被释放，就什么也不做
    weakSelf?.view.backgroundColor = UIColor.redColor()
}
</code></pre>
]]></content>
  </entry>
  
</feed>
