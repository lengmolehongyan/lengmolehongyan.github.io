<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[冷漠叻荭颜]]></title>
  <link href="http://lengmolehongyan.github.io/atom.xml" rel="self"/>
  <link href="http://lengmolehongyan.github.io/"/>
  <updated>2016-01-19T21:38:18+08:00</updated>
  <id>http://lengmolehongyan.github.io/</id>
  <author>
    <name><![CDATA[冷漠叻荭颜]]></name>
    <email><![CDATA[lengmohongyan@hotmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Facebook Xctool 的使用]]></title>
    <link href="http://lengmolehongyan.github.io/blog/2016/01/14/facebook-xctool-de-shi-yong/"/>
    <updated>2016-01-14T18:18:43+08:00</updated>
    <id>http://lengmolehongyan.github.io/blog/2016/01/14/facebook-xctool-de-shi-yong</id>
    <content type="html"><![CDATA[<h2>xctool</h2>

<p><strong>xctool</strong> 相比苹果的 <strong>xcodebuild</strong>，可以更加简单地编译构建和测试 iOS、Mac 项目，对可持续集成 CI 尤其有用。</p>

<h2>特点</h2>

<p><strong>xctool</strong> 在 xcodebuild 的基础上添加了一些额外的功能：</p>

<ul>
<li><p>格式化输出构建和测试项目结果：</p>

<p>  xctool 将所有构建和测试项目的结果格式化为 JSON 对象，如果你正在构建一个可持续集成系统，使用 xctool 意味着不需要再正则解析 xcodebuild 的输出结果了。</p>

<p>  选择一种输出格式，尝试自定义输出结果，使用 <code>-reporter json-stream</code> 可以查看完整的事件流。</p></li>
</ul>


<!--more-->


<ul>
<li><p>友好的，ANSI 标准色输出：</p>

<p>  xcodebuild 为每个源文件打印所有编译指令和输出，非常冗长。而 xctool 默认只在出错的地方比较详细，更容易找出问题所在。</p>

<p>  例：</p>

<p>  <img src="https://camo.githubusercontent.com/f4c5388651b83663ff811969c0e2099073c25484/68747470733a2f2f66706f747465725f7075626c69632e73332e616d617a6f6e6177732e636f6d2f7863746f6f6c2d7569636174616c6f672e676966" alt="" /></p></li>
<li><p>更快、并行化的测试运行：</p>

<p>  xctool 可以视情况并行运行所有测试任务，大大加快测试工作。在 Facebook，并行运行我们已经看到 2~3 倍的加速。</p>

<p>  使用 <code>-parallelize</code> 选项以启用 run-tests 或者 test，更多信息请参阅 <a href="https://github.com/facebook/xctool#parallelizing-test-runs">Parallelizing Test Runs</a> 。</p></li>
<li><p>编写于 Objective-C ：</p>

<p>  xctool 是使用 Objective-C 编写的，Mac OSX 和 iOS 开发者不需要学习新的语言，并且可以轻松地提交新的功能和修复 bug 。我们非常欢迎提交 PR (pull request) 。</p></li>
</ul>


<h2>使用必备条件</h2>

<ul>
<li>Xcode6 或更高版本</li>
<li>需要安装 Xcode 的命令行工具（Command Line Tools），可以在 Xcode → Preferences → Downloads 安装。</li>
</ul>


<h2>安装</h2>

<p>xctool 可以从 homebrew 安装</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install xctool</span></code></pre></td></tr></table></div></figure>


<p>也可以下载后运行 xctool.sh 命令。</p>

<h2>使用</h2>

<p>xctool 的命令和选项是 xcodebuild 的一个扩展，在大多数情况下，你只需要替换 <strong>xcodebuild</strong> 为 <strong>xctool</strong> ，会如期运行，但有更具吸引力的输出。</p>

<p>可以通过如下命令获取帮助和完整的配置列表：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>path/to/xctool.sh -help</span></code></pre></td></tr></table></div></figure>


<h2>构建</h2>

<p>使用 xctool 构建项目和使用 xcodebuild 是一样的。</p>

<p>如果是使用 workspaces 和 schemes ：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>path/to/xctool.sh \
</span><span class='line'>  -workspace YourWorkspace.xcworkspace \
</span><span class='line'>  -scheme YourScheme \
</span><span class='line'>  build</span></code></pre></td></tr></table></div></figure>


<p>如果使用的是 projects 和 schemes：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>path/to/xctool.sh \
</span><span class='line'>  -project YourProject.xcodeproj \
</span><span class='line'>  -scheme YourScheme \
</span><span class='line'>  build</span></code></pre></td></tr></table></div></figure>


<p>常见配置比如 <code>-configuration</code> ，<code>-sdk</code> ，<code>-arch</code> 和 xcodebuild 是相同的。</p>

<p>注意：xctool 不支持使用 <code>-target</code> 来编译构建 targets ，必须使用 schemes 。</p>

<p class='post-footer'>
            原始地址：
            <a href='http://lengmolehongyan.github.io/blog/2016/01/14/facebook-xctool-de-shi-yong/'>http://lengmolehongyan.github.io/blog/2016/01/14/facebook-xctool-de-shi-yong/</a><br/>
            written by <a href='http://lengmolehongyan.github.io'>冷漠叻荭颜</a>
            &nbsp;posted at <a href='http://lengmolehongyan.github.io'>http://lengmolehongyan.github.io</a>
            </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 开发使用 Jenkins 搭建 CI 服务器]]></title>
    <link href="http://lengmolehongyan.github.io/blog/2016/01/13/ios-jenkins-use/"/>
    <updated>2016-01-13T18:57:16+08:00</updated>
    <id>http://lengmolehongyan.github.io/blog/2016/01/13/ios-jenkins-use</id>
    <content type="html"><![CDATA[<h2>准备</h2>

<p>打开 <a href="http://jenkins-ci.org/">Jenkins 官网</a>，官网右侧可以下载最新版本的 <a href="http://mirrors.jenkins-ci.org/war/latest/jenkins.war">jenkins.war</a>。</p>

<!--more-->


<p><img src="http://lengmolehongyan.github.io/images/QQ20160113-0@2x.png" alt="jenkins.war" /></p>

<p>下载完成后，终端进入到 jenkins.war 所在文件夹，执行以下命令：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>java -jar jenkins.war --httpPort<span class="o">=</span>8888
</span></code></pre></td></tr></table></div></figure>


<p>可以创建一个 bash/zsh alias 来给上述指令起一个别名，示例如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">alias </span><span class="nv">jenkins</span><span class="o">=</span><span class="s2">&quot;java -jar 此处为jenkins.war文件所在路径&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果使用的是 bash，在用户目录下的 <code>.bashrc</code> 文件中添加上面这句，别名就起好了，如果使用的是 zsh，则在用户目录下的 <code>.zshrc</code> 文件增加。之后，在终端，直接输入 <code>jenkins</code> 指令就可以启动 jenkins 。</p>

<p>如果出现以下提示，说明需要升级 Java 版本，Jenkins 需要至少 Java7 及以后的版本，可以在此页面下载 <a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html">Java</a> 。</p>

<p><img src="http://lengmolehongyan.github.io/images/2016011315-19-43@2x.png" alt="错误提示" /></p>

<p>上面在终端输入的命令中，<code>httpPort</code> 指定的是 Jenkins 所使用的本机 http 端口号，可以自行修改，等待 Jenkins 完全启动后，终端会有如下提示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>...
</span><span class='line'>信息: Jenkins is fully up and running
</span></code></pre></td></tr></table></div></figure>


<p>现在在浏览器打开 <a href="http://localhost:8888/">http://localhost:8888/</a>，就可以看到本机 Jenkins 的界面了。</p>

<h2>Jenkins 配置</h2>

<p>Jenkins 默认没有安装 <code>git</code> 插件，需要手动安装。如下图，在 Jenkins 的界面左侧，依次点击系统管理，管理插件，在可选插件下，筛选 <code>git</code>，然后勾选 Git plugin，Git server plugin 和 Git client plugin，点击下载待重启后安装按钮，等待插件下载安装成功后，重启 Jenkins 就可以了。</p>

<p><img src="http://lengmolehongyan.github.io/images/QQ20160113-2@2x.png" alt="管理插件" /></p>

<p><img src="http://lengmolehongyan.github.io/images/QQ20160113-1@2x.png" alt="安装 git 插件" /></p>

<p>安装过程中如果遇到下面这种错误，提示插件下载地址错误导致安装失败，从错误信息中拷贝重定向后的地址手动下载，下载完成后进入插件管理，选择高级，然后上传插件安装就可以了。</p>

<p><img src="http://lengmolehongyan.github.io/images/QQ20160113-3@2x.png" alt="安装插件失败" /></p>

<p><img src="http://lengmolehongyan.github.io/images/QQ20160114-0@2x.png" alt="手动安装插件" /></p>

<p>在 Jenkins 系统管理，系统设置中可以配置系统管理员邮件地址和邮件通知，Jenkins 可以在适当的时机发送邮件通知，发送邮件使用的是 <code>SMTP</code> 协议。在设置邮箱时，Jenkins 管理员邮箱要与 <code>SMTP</code> 中设置的发送邮箱为同一个邮箱。这里配置完成后，可以发送测试邮件，测试是否配置成功。</p>

<p><img src="http://lengmolehongyan.github.io/images/QQ20160114-1@2x.png" alt="配置系统管理员邮件地址" /></p>

<p><img src="http://lengmolehongyan.github.io/images/QQ20160114-2@2x.png" alt="配置邮件通知" /></p>

<h2>新建项目</h2>

<p>Jenkins 默认使用当前用户 <code>.ssh</code> 目录下的公私钥来进行 <code>git</code> 的相关操作。在 Jenkins 首页，点击新建，输入项目名称，选择构建项目的属性，然后点击 OK，进入项目配置页面。</p>

<p><img src="http://lengmolehongyan.github.io/images/QQ20160114-3@2x.png" alt="创建项目" /></p>

<p>在项目配置页面，找到源码管理，配置项目的远程仓库，填入项目的远程仓库 <code>git</code> 地址，以及编译构建项目的分支。</p>

<p><img src="http://lengmolehongyan.github.io/images/QQ20160114-4@2x.png" alt="项目配置" /></p>

<p>下一步就是对项目编译的设置，在项目配置最下方的构建选项，点击增加构建步骤，可以选择通过 <code>shell</code> 脚本编译，也可以使用 Jenkins 自带的 Xcode 插件（需要安装 Xcode 插件）。编写脚本，可以直接使用 Xcode 的 xcodebuild 来写，也可以直接使用 Facebook 的 <a href="https://github.com/facebook/xctool">xctool</a> 。</p>

<p><img src="http://lengmolehongyan.github.io/images/QQ20160114-5@2x.png" alt="项目编译设置" /></p>

<p>项目成功编译以后，可以设置编译构建出来的 ipa 文件保存位置，同时可以设置当编译构建失败时的邮件提醒。</p>

<p><img src="http://lengmolehongyan.github.io/images/QQ20160114-6@2x.png" alt="编译后操作设置" /></p>

<p>上述所有操作完成之后，点击应用并保存，回到测试项目首页，便可以编译构建项目了，项目如果需要修改配置，可以直接在配置里面修改。</p>

<p><img src="http://lengmolehongyan.github.io/images/QQ20160114-7@2x.png" alt="项目创建完成" /></p>

<h2>TODO</h2>

<p> 接下来就是学习 Facebook 的 xctool 的使用&hellip;&hellip;</p>

<p class='post-footer'>
            原始地址：
            <a href='http://lengmolehongyan.github.io/blog/2016/01/13/ios-jenkins-use/'>http://lengmolehongyan.github.io/blog/2016/01/13/ios-jenkins-use/</a><br/>
            written by <a href='http://lengmolehongyan.github.io'>冷漠叻荭颜</a>
            &nbsp;posted at <a href='http://lengmolehongyan.github.io'>http://lengmolehongyan.github.io</a>
            </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[约束剖析（Anatomy of a Constraint）]]></title>
    <link href="http://lengmolehongyan.github.io/blog/2016/01/02/anatomy-of-a-constraint/"/>
    <updated>2016-01-02T12:09:52+08:00</updated>
    <id>http://lengmolehongyan.github.io/blog/2016/01/02/anatomy-of-a-constraint</id>
    <content type="html"><![CDATA[<p>视图层次结构上的布局是由一些列的公式（线性方程）来定义的，每个约束都有一个单一的表达式，你的目标就是要让这一系列的表达式有且仅有一个结果。</p>

<p>示例公式如下：</p>

<!--more-->


<p><img src="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/AutolayoutPG/Art/view_formula_2x.png" alt="view_formula" /></p>

<p>这个约束声明了红色视图（view）的左边（leading）距离蓝色视图（view）的右边（trailing）始终保持 8 个点，这个公式有如下几项：</p>

<ul>
<li><strong>item 1（第一项）</strong>：表达式中的第一项，在这个例子中，就是红色视图（view）。这一项必须是一个视图（view）或者是一个布局参考线（layout guide）。</li>
<li><strong>Attribute 1（属性 1）</strong>：要约束表达式中第一项的属性，在此例中，就是红色视图（view）的左边（leading）。</li>
<li><strong>Relationship（关系）</strong>：表达式左右两边之间的关系，有三种关系，等于，大于等于，小于等于，在此例中，左右两边是相等的关系。</li>
<li><strong>Multiplier（乘数）</strong>：此浮点数值将用于和属性 2 的值相乘，在此例中，这个值是 1.0。</li>
<li><strong>Item 2（第二项）</strong>：表达式中的第二项，在此例中就是蓝色视图（view），不像第一项，这一项可以是空的。</li>
<li><strong>Attribute 2（属性 2）</strong>：要约束表达式中第二项的属性，在此例中，就是蓝色视图（view）的右边（trailing）。如果第二项是空，这里一定不是一个属性。</li>
<li><strong>Constant（常量）</strong>：一个表示偏移量的浮点数常量，在此例中，值是 8.0。这个值是用来添加到属性 2 上的。</li>
</ul>


<p></p>


<p>界面上的大多数约束是由两项之间的关系表示的，这些项可以是视图，也可以是布局参考线。约束也可以表示同一视图两个不同属性之间的关系，比如，设置视图的宽高比例，也可以给视图的高或宽设置为一个常量值，当设置为常量值时，第二项为空，第二项的属性设置为 Not An Attribute，乘数为 0.0。</p>

<h2>自动布局属性</h2>

<p>在自动布局中，属性的功能就是被约束的，通常包括四个边界（前后上下），还有高度、宽度以及垂直和水平中心。文本控件还有一个或多个基线（baseline）属性。</p>

<p><img src="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/AutolayoutPG/Art/attributes_2x.png" alt="attributes" /></p>

<p>有关完整的布局属性列表，参阅 <a href="https://developer.apple.com/library/ios/documentation/AppKit/Reference/NSLayoutConstraint_Class/index.html#//apple_ref/c/tdef/NSLayoutAttribute">NSLayoutAttribute 枚举</a> 。</p>

<blockquote><p>注：
虽然 OSX 和 iOS 都是使用 NSLayoutAttribute 枚举，但它们定义的值集稍有不同，查阅完整布局属性列表时，请确保查看的是正确平台的文档。</p></blockquote>

<h2>示例方程</h2>

<p>通过方程中大量的参数和属性可以创建多种不同类型的约束，你可以定义两个视图之间的间距、视图边缘的对齐方式、两个视图的相对大小，甚至定义视图的纵横比。然而，并非所有属性都是兼容的。</p>

<p>有两种基本类型的属性，大小属性（例如，高度和宽度）和位置属性（例如，左边和顶部）。大小属性用于指定一个视图有多大，并不指定视图的位置。位置属性用于指定视图相对其他视图的位置，同样不涉及视图的大小。</p>

<p>带着这些差异，再看看下面这些规则：</p>

<ul>
<li>大小属性的约束不能添加到位置属性上</li>
<li>大小属性只能赋值常量</li>
<li>对于位置属性，不能将垂直属性的约束添加到水平属性上</li>
<li>对于位置属性，不能将 Leading 和 Trailing 属性的约束添加到 Left 和 Right 属性上</li>
</ul>


<p></p>


<p>例如，没有额外的属性仅设置一个视图的顶部为一个常量值 20.0 是没有意义的，必须总是定义某一视图相对于其他视图的位置属性，比如，设置距离其父视图的顶部为 20.0 个点。然而，设置某一视图的高度是 20.0 是有效的。更多信息，参阅 <a href="">自动布局属性值解释</a>。</p>

<p>3-1 列出了不同常见约束的表达式。</p>

<blockquote><p>注：
本章节所有示例方程都是使用的伪代码，想看实际代码创建约束，参阅 <a href="">自动布局手册</a> 和 <a href="">代码创建约束</a>。</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 3-1 常见约束示例表达式</span>
</span><span class='line'><span class="c1">// 设置高度常量值</span>
</span><span class='line'><span class="n">View</span><span class="p">.</span><span class="n">height</span> <span class="o">=</span> <span class="mf">0.0</span> <span class="o">*</span> <span class="n">NotAnAttribute</span> <span class="o">+</span> <span class="mf">40.0</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 设置两个按钮之间的固定间距</span>
</span><span class='line'><span class="n">Button_2</span><span class="p">.</span><span class="n">leading</span> <span class="o">=</span> <span class="mf">1.0</span> <span class="o">*</span> <span class="n">Button_1</span><span class="p">.</span><span class="n">trailing</span> <span class="o">+</span> <span class="mf">8.0</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 设置两个按钮的前部边缘对齐</span>
</span><span class='line'><span class="n">Button_1</span><span class="p">.</span><span class="n">leading</span> <span class="o">=</span> <span class="mf">1.0</span> <span class="o">*</span> <span class="n">Button_2</span><span class="p">.</span><span class="n">leading</span> <span class="o">+</span> <span class="mf">0.0</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 设置两个按钮的宽度相同</span>
</span><span class='line'><span class="n">Button_1</span><span class="p">.</span><span class="n">width</span> <span class="o">=</span> <span class="mf">1.0</span> <span class="o">*</span> <span class="n">Button_2</span><span class="p">.</span><span class="n">width</span> <span class="o">+</span> <span class="mf">0.0</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 设置视图在其父视图的中心</span>
</span><span class='line'><span class="n">View</span><span class="p">.</span><span class="n">centerX</span> <span class="o">=</span> <span class="mf">1.0</span> <span class="o">*</span> <span class="n">Superview</span><span class="p">.</span><span class="n">centerX</span> <span class="o">+</span> <span class="mf">0.0</span>
</span><span class='line'><span class="n">View</span><span class="p">.</span><span class="n">centerY</span> <span class="o">=</span> <span class="mf">1.0</span> <span class="o">*</span> <span class="n">Superview</span><span class="p">.</span><span class="n">centerY</span> <span class="o">+</span> <span class="mf">0.0</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 设置视图的宽高比为一个常量值</span>
</span><span class='line'><span class="n">View</span><span class="p">.</span><span class="n">height</span> <span class="o">=</span> <span class="mf">2.0</span> <span class="o">*</span> <span class="n">View</span><span class="p">.</span><span class="n">width</span> <span class="o">+</span> <span class="mf">0.0</span>
</span></code></pre></td></tr></table></div></figure>


<h2>相等，不是赋值</h2>

<p>注意，示例中方程的等号表示的是相等，而不是赋值。</p>

<p>当自动布局求解这些方程时，并不是将等式右边的值赋值给等式左边。相反，它同时计算属性 1 和属性 2 的值使它们之间的关系成立，这就意味着可以自由调整表达式中的项。比如，3-2 中的方程就和 3-1 的结果是相同的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 3-2 反向方程</span>
</span><span class='line'><span class="c1">// 设置两个按钮之间的固定间距</span>
</span><span class='line'><span class="n">Button_1</span><span class="p">.</span><span class="n">trailing</span> <span class="o">=</span> <span class="mf">1.0</span> <span class="o">*</span> <span class="n">Button_2</span><span class="p">.</span><span class="n">leading</span> <span class="o">-</span> <span class="mf">8.0</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 设置两个按钮的前部边缘对齐</span>
</span><span class='line'><span class="n">Button_2</span><span class="p">.</span><span class="n">leading</span> <span class="o">=</span> <span class="mf">1.0</span> <span class="o">*</span> <span class="n">Button_1</span><span class="p">.</span><span class="n">leading</span> <span class="o">+</span> <span class="mf">0.0</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 设置两个按钮宽度相同</span>
</span><span class='line'><span class="n">Button_2</span><span class="p">.</span><span class="n">width</span> <span class="o">=</span> <span class="mf">1.0</span> <span class="o">*</span> <span class="n">Button</span><span class="p">.</span><span class="n">width</span> <span class="o">+</span> <span class="mf">0.0</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 设置视图在其父视图的中心</span>
</span><span class='line'><span class="n">Superview</span><span class="p">.</span><span class="n">centerX</span> <span class="o">=</span> <span class="mf">1.0</span> <span class="o">*</span> <span class="n">View</span><span class="p">.</span><span class="n">centerX</span> <span class="o">+</span> <span class="mf">0.0</span>
</span><span class='line'><span class="n">Superview</span><span class="p">.</span><span class="n">centerY</span> <span class="o">=</span> <span class="mf">1.0</span> <span class="o">*</span> <span class="n">View</span><span class="p">.</span><span class="n">centerY</span> <span class="o">+</span> <span class="mf">0.0</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 设置视图的宽高比为一个常量值</span>
</span><span class='line'><span class="n">View</span><span class="p">.</span><span class="n">width</span> <span class="o">=</span> <span class="mf">0.5</span> <span class="o">*</span> <span class="n">View</span><span class="p">.</span><span class="n">height</span> <span class="o">+</span> <span class="mf">0.0</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>注：
当重新调整方程中的项时，请确保调整了乘数和常量。比如，常量值 8.0 要变成 -8.0，乘数 2.0 要变成 0.5，常量值 0.0 和 乘数 1.0 保持不变。</p></blockquote>

<p>你会发现，自动布局经常提供多种方式来解决同样的问题。理想情况下，你应该选择的是最能清晰表达意图的方案。然而，不同的开发者无疑会不同意哪个方案是最好的。这里，相比正确的方案，一贯选择好的方案。如果你选择一种方案，并坚持使用，从长远来看，你将遇到很少问题。比如，本指南使用以下规则：</p>

<ol>
<li>整数乘法优先于小数乘法。</li>
<li>正数优先于负数。</li>
<li>不管在哪，视图应该以从前到后，从上到下的布局顺序。</li>
</ol>


<h2>创建没有歧义的、不冲突的布局</h2>

<p>使用自动布局的目标就是，创建一系列方程让这每一个方程有且仅有一个可能的结果。有歧义的约束有不止一个结果，冲突的约束不会有有效的结果。</p>

<p>一般情况下，必须为每一个视图都指定大小和位置的约束。但是，假设父视图的尺寸已经设置了（比如，在 iOS 中控制器的根视图），</p>

<p>😄😄😄正在翻译。。。😄😄😄</p>

<p class='post-footer'>
            原始地址：
            <a href='http://lengmolehongyan.github.io/blog/2016/01/02/anatomy-of-a-constraint/'>http://lengmolehongyan.github.io/blog/2016/01/02/anatomy-of-a-constraint/</a><br/>
            written by <a href='http://lengmolehongyan.github.io'>冷漠叻荭颜</a>
            &nbsp;posted at <a href='http://lengmolehongyan.github.io'>http://lengmolehongyan.github.io</a>
            </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[没有约束的自动布局（Auto Layout Without Constraints）]]></title>
    <link href="http://lengmolehongyan.github.io/blog/2016/01/01/auto-layout-without-constraints/"/>
    <updated>2016-01-01T10:38:41+08:00</updated>
    <id>http://lengmolehongyan.github.io/blog/2016/01/01/auto-layout-without-constraints</id>
    <content type="html"><![CDATA[<p>StackView 提供了一种简单的方法，剔除了复杂的约束，利用自动布局的强大来布局界面，单个 StackView 由一行或者一列控件组成，StackView 根据自身的属性布局这些控件。</p>

<ul>
<li><a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIStackView_Class_Reference/index.html#//apple_ref/occ/instp/UIStackView/axis">axis</a>:（仅 UIStackView）表示 StackView 的方向，纵向或者水平。</li>
<li>orientation:（仅 NSStackView）表示 StackView 的方向，纵向或者水平。</li>
<li><a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIStackView_Class_Reference/index.html#//apple_ref/occ/instp/UIStackView/distribution">distribution</a>：表示沿着 axis 方向的视图布局方式。</li>
<li><a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIStackView_Class_Reference/index.html#//apple_ref/occ/instp/UIStackView/alignment">alignment</a>：表示纵向于 axis 方向的视图布局方式。</li>
<li><a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIStackView_Class_Reference/index.html#//apple_ref/occ/instp/UIStackView/spacing">spacing</a>：表示相邻视图之间的间隔。</li>
</ul>


<p></p>


<p>要使用 StackView，在 IB 中拖一个纵向或者水平的 StackView 到画布中，然后拖控件放到 StackView 内。</p>

<p>如果一个视图有自身内容大小，它在 StackView 中将显示为自身的大小。如果没有，IB 将会提供默认的大小，你可以调整它的大小，IB 中添加约束来保持大小不变。</p>

<p>想进一步微调布局，可以在属性检查器（Attributes Inspector） 修改 StackView 的属性。下面这个例子，设置 StackView 的 spacing 属性为 8 个点，distribution 属性为 Fill Equally。</p>

<!--more-->


<p><img src="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/AutolayoutPG/Art/IB_StackView_Simple_2x.png" alt="IB_StackView_Simple" /></p>

<p>StackView 的布局还基于子视图的内容压缩和抗压缩优先级，可以在尺寸检查器（Size Inspector）修改。</p>

<blockquote><p>注：
可以通过给子视图直接添加约束来更进一步的调整布局，但是，要避免任何可能的冲突。通用法则：如果视图对于一个给定的大小默认回到其本身内容大小，便可以安全添加该约束。更多约束冲突，参阅 <a href="">约束冲突（Unsatisfiable Layouts）</a>。</p></blockquote>

<p>此外，你还可以用 StackView 嵌套 StackView，构建更加复杂的布局。</p>

<p><img src="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/AutolayoutPG/Art/IB_StackView_NestedStacks_2x.png" alt="IB_StackView_NestedStacks" /></p>

<p>一般情况下，尽可能多的使用 StackView 来管理布局，只有使用 StackView 不能达到效果时，再去创建约束。</p>

<p>有关 StackView 的更多使用，参阅 <a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIStackView_Class_Reference/index.html#//apple_ref/doc/uid/TP40015256">UIStackView Class Reference</a> 或者 NSStackView Class Reference。</p>

<blockquote><p>注：
虽然嵌套使用 StackView 可以构建出复杂的界面，但仍不能完全避开约束的使用，因为至少总是需要设置最外层视图的位置（和可能的大小）。</p></blockquote>

<p>原文链接：<a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/AutolayoutPG/AutoLayoutWithoutConstraints.html#//apple_ref/doc/uid/TP40010853-CH8-SW1">Auto Layout Without Constraints</a></p>

<p class='post-footer'>
            原始地址：
            <a href='http://lengmolehongyan.github.io/blog/2016/01/01/auto-layout-without-constraints/'>http://lengmolehongyan.github.io/blog/2016/01/01/auto-layout-without-constraints/</a><br/>
            written by <a href='http://lengmolehongyan.github.io'>冷漠叻荭颜</a>
            &nbsp;posted at <a href='http://lengmolehongyan.github.io'>http://lengmolehongyan.github.io</a>
            </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[理解自动布局（Understanding Auto Layout）]]></title>
    <link href="http://lengmolehongyan.github.io/blog/2016/01/01/understanding-auto-layout/"/>
    <updated>2016-01-01T00:05:16+08:00</updated>
    <id>http://lengmolehongyan.github.io/blog/2016/01/01/understanding-auto-layout</id>
    <content type="html"><![CDATA[<p>自动布局会依据给视图 view 在视图层次中设置的约束来动态计算它的大小和位置。比如，你可以设置一个 UIButton 的约束为：和一个 UIImageView 水平居中，并且 UIButton 的顶部距离 UIImageView 的底部保持 8 个点。之后如果 UIImageView 的大小或者位置改变，UIButton 的位置将会自动调整。</p>

<p>基于约束这种方式来写界面就可以动态响应来自视图内部和外部的变化。</p>

<h2>外部变化</h2>

<p>外部变化发生在父视图的大小或者形状发生改变。每次变化，都必须充分利用可用空间来为视图 view 更新布局。下面是一些常见的外部变化源：</p>

<ul>
<li>用户调整窗口（OSX）</li>
<li>用户在 iPad 上进入或者离开 SplitView（iOS）</li>
<li>设备旋转（iOS）</li>
<li>电话和录音状态栏的出现或者消失（iOS）</li>
<li>想适配 Size Classes</li>
<li>想适配不同屏幕大小</li>
</ul>


<p></p>


<p>这些场景大多发生在应用运行状态下，它们需要应用做出动态响应。但其它比如支持不同屏幕尺寸的应用，就可以适应不同的场景。因为对于一个设备的屏幕尺寸是不会发生改变的，但界面布局适配后你的应用在 iPhone4S 和 iPhone6 Plus，甚至 iPad 上运行效果都是相同的。自动布局同时也是 iPad 上支持 SlideOver 和 SplitView 的重要组件。</p>

<!--more-->


<h2>内部变化</h2>

<p>内部变化发生在视图尺寸改变或者用户界面事件改变。</p>

<p>下面是一些常见的内部变化源：</p>

<ul>
<li>程序展示内容发生改变</li>
<li>程序支持国际化</li>
<li>程序支持 Dynamic Type（iOS）</li>
</ul>


<p></p>


<p>当程序展示内容发生改变时，相比旧的布局，新的内容可能需要不同的布局。这一般发生在程序显示文本或者图片时。比如，一个新闻类的应用，需要依据新闻文章的大小来调整它的布局。同样，一个照片集合的页面需要处理大量图片尺寸和缩放比例的问题。</p>

<p>国际化可以使你的程序在不同的语言，区域和文化下都能使用。一个做了国际化的应用的布局必须考虑这些差异，同时也应该支持在不同语言和区域的环境下，显示正确。</p>

<p>国际化影响布局主要有三个因素。第一，用户界面上的语言需要翻译，标签（label） 就需要不同的空间来展示。比如，德语所占空间通常比英语的大，而日语所占空间小很多。</p>

<p>第二，即使语言相同，不同地区显示日期和数字的格式也会不同。尽管这些变化通常比语言变化带来的影响略小，界面仍需要适配这些细微的大小变化。</p>

<p>第三，语言的改变不仅影响文本的大小，而且对布局也会有影响，因为不同的语言可能使用不同的布局方向，比如英语是从左至右的方向，而阿拉伯语和希伯来语是从右至左的方向。通常，界面上的控件的顺序应该和布局的方向相匹配，如果在英语环境下一个按钮在视图的右下方，在阿拉伯语下应该在左下方。</p>

<p>最后，如果你的 iOS 应用支持 Dynamic Type，用户则可以更改这个应用中的字体大小。这样会导致界面上所有有文本的控件的高度宽度都发生变化。如果用户在使用应用时更改字体大小，字体和布局必须适应变化。</p>

<h2>自动布局 VS 计算 Frame 布局</h2>

<p>目前，有三种方法来布局界面，代码计算 frame 布局、使用 AutoresizingMask 自动响应一些外部变化布局，或者自动布局。</p>

<p>通常，应用是通过代码为视图层次中的每个视图设置 frame 来布局界面的，frame 表示一个视图在其父视图坐标系的位置和大小。</p>

<p><img src="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/AutolayoutPG/Art/layout_views_2x.png" alt="layout_views" /></p>

<p>通过计算 frame 来布局界面，必须要为视图层次中的每个视图计算大小和位置，而且，如果发生改变，还需要为所有影响的视图重新计算。</p>

<p>在很多情况下，通过代码来设置一个视图的 frame 的确比较灵活、强大，当有变化时，可以简单修改几个数字就能达到想要的效果。然而，因为必须自己管理所有变化，布局一个简单的界面将需要考虑大量因素来设计、调试和维护，这样为创建一个真正适配的界面就增加了不止一个数量级的难度。</p>

<p>相比计算 frame 布局，使用 AutoresizingMask 简单点，AutoresizingMask 用于父视图的 frame 变化时，子视图的 frame 如何改变，这种简单的布局方式适用于外部变化。</p>

<p>AutoresizingMask 支持相对较小的布局子集，对于复杂的界面，通常需要用代码增加 AutoresizingMask 变化。而且，AutoresizingMask 仅适用于外部变化，不支持内部变化。</p>

<p>尽管 AutoresizingMask 是布局上的一个提升，但是自动布局则呈现了全新的模式。以前需要考虑一个视图的 frame，而用自动布局，只需要考虑视图的关系。</p>

<p>自动布局则是界面上使用大量约束，约束通常表示两个视图之间的关系，自动布局根据约束来计算每个视图的大小和位置，这样布局就可以动态响应来自视图内部和外部的变化。</p>

<p><img src="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/AutolayoutPG/Art/layout_constraints_2x.png" alt="layout_constraints" /></p>

<p>通过设计一套约束来创建特定行为的逻辑不同于写程序或者面向对象的代码。幸运的是，掌握自动布局和掌握其他编程技术是一样的，有两个基本步骤：首先理解基于约束布局背后的逻辑，然后学习 API。这也是成功学习其他编程技术的步骤，自动布局当然也不例外。</p>

<p>本指南的剩余部分旨在帮助你轻松过渡到自动布局。<a href="">没有约束的自动布局</a> 章节描述了在界面上简化创建自动布局的高级抽象概念。<a href="">约束剖析</a> 章节提供了你需要理解与自动布局成功交互的背后原理。<a href="">在 IB 中使用约束</a> 章节描述了设计自动布局的工具，<a href="">代码创建约束</a> 和 <a href="">自动布局手册</a> 章节详细地介绍了自动布局的 API。最后，<a href="">自动布局手册</a> 章节提供了大量且不同复杂层次的布局例子，你可以在自己的项目中学习和使用，<a href="">自动布局调试</a> 章节则提供了发生错误时的修复建议和工具。</p>

<p>原文链接：<a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/AutolayoutPG/index.html#//apple_ref/doc/uid/TP40010853-CH7-SW1">Understanding Auto Layout</a></p>

<p class='post-footer'>
            原始地址：
            <a href='http://lengmolehongyan.github.io/blog/2016/01/01/understanding-auto-layout/'>http://lengmolehongyan.github.io/blog/2016/01/01/understanding-auto-layout/</a><br/>
            written by <a href='http://lengmolehongyan.github.io'>冷漠叻荭颜</a>
            &nbsp;posted at <a href='http://lengmolehongyan.github.io'>http://lengmolehongyan.github.io</a>
            </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自动布局指南（Auto Layout Guide）]]></title>
    <link href="http://lengmolehongyan.github.io/blog/2015/12/27/understanding-auto-layout/"/>
    <updated>2015-12-27T19:14:33+08:00</updated>
    <id>http://lengmolehongyan.github.io/blog/2015/12/27/understanding-auto-layout</id>
    <content type="html"><![CDATA[<p>跟随官方文档 <a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/AutolayoutPG/index.html">自动布局指南</a> 的脚步，AutoLayout 从入门到进阶。</p>

<p>文章目录结构：</p>

<ul>
<li><p>入门（Getting Started）</p>

<ul>
<li><a href="http://lengmolehongyan.github.io/blog/2016/01/01/understanding-auto-layout/">理解自动布局（Understanding Auto Layout）</a></li>
<li><a href="http://lengmolehongyan.github.io/blog/2016/01/01/auto-layout-without-constraints/">没有约束的自动布局（Auto Layout Without Constraints）</a></li>
<li><a href="http://lengmolehongyan.github.io/blog/2016/01/02/anatomy-of-a-constraint/">约束剖析（Anatomy of a Constraint）</a></li>
<li><a href="">在 IB 中使用约束（Working with Constraints in Interface Builder）</a></li>
</ul>
</li>
</ul>


<p></p>


<ul>
<li><p>自动布局手册（Auto Layout Cookbook）</p>

<ul>
<li><a href="">Stack Views</a></li>
<li><a href="">简单约束（Simple Constraints）</a></li>
<li><a href="">自身有内容尺寸的视图（Views with Intrinsic Content Size）</a></li>
</ul>
</li>
</ul>


<p></p>


<ul>
<li><p>自动布局调试</p>

<ul>
<li><a href="">错误类型（Types of Errors）</a></li>
<li><a href="">约束冲突（Unsatisfiable Layouts）</a></li>
<li><a href="">有歧义的布局（Ambiguous Layouts）</a></li>
<li><a href="">逻辑错误（Logical Errors）</a></li>
<li><a href="">调试技巧（Debugging Tricks and Tips）</a></li>
</ul>
</li>
</ul>


<p></p>


<ul>
<li><p>自动布局进阶</p>

<ul>
<li><a href="">代码创建约束（Programmatically Creating Constraints）</a></li>
<li><a href="">SizeClass 详细约束（Size-Class-Specific Layout）</a></li>
<li><a href="">ScrollView 与自动布局（Working with Scroll Views）</a></li>
<li><a href="">自动布局与自动计算行高的 TableViewCell（Working with Self-Sizing Table View Cells）</a></li>
</ul>
</li>
</ul>


<p></p>


<ul>
<li><p>附录</p>

<ul>
<li><a href="">VFL 语言（Visual Format Language）</a></li>
</ul>
</li>
</ul>


<p></p>


<ul>
<li><p>修改历史</p>

<ul>
<li><a href="">文档修改历史（Document Revision History）</a></li>
</ul>
</li>
</ul>


<p class='post-footer'>
            原始地址：
            <a href='http://lengmolehongyan.github.io/blog/2015/12/27/understanding-auto-layout/'>http://lengmolehongyan.github.io/blog/2015/12/27/understanding-auto-layout/</a><br/>
            written by <a href='http://lengmolehongyan.github.io'>冷漠叻荭颜</a>
            &nbsp;posted at <a href='http://lengmolehongyan.github.io'>http://lengmolehongyan.github.io</a>
            </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 自定义通知声音]]></title>
    <link href="http://lengmolehongyan.github.io/blog/2015/12/25/zi-ding-yi-tong-zhi-sheng-yin/"/>
    <updated>2015-12-25T22:49:49+08:00</updated>
    <id>http://lengmolehongyan.github.io/blog/2015/12/25/zi-ding-yi-tong-zhi-sheng-yin</id>
    <content type="html"><![CDATA[<p>项目中遇到需要自定义通知声音的需求，以前没做过，就查了下<a href="https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/IPhoneOSClientImp.html#//apple_ref/doc/uid/TP40008194-CH103-SW6">官方文档</a>，就像文档上说的，实现起来确实挺简单，就整理下当做备忘吧。</p>

<p>关于推送，官方文档、各种第三方推送文档都很全，就跳过了。</p>

<p>由于自定义通知声音还是由 iOS 系统来播放的，所以对音频数据格式有限制，可以是如下四种之一：</p>

<ol>
<li>Linear PCM</li>
<li>MA4 (IMA/ADPCM)</li>
<li>µLaw</li>
<li>aLaw</li>
</ol>


<p></p>


<p>对应音频文件格式是 <code>aiff</code>，<code>wav</code>，<code>caf</code> 文件，文件也必须放到 app 的 <code>mainBundle</code> 目录中。</p>

<p>自定义通知声音的播放时间必须在 30s 内，如果超过这个限制，则将用系统默认通知声音替代。</p>

<!--more-->


<p>可以使用 <code>afconvert</code> 工具来处理音频文件格式，在终端中敲入如下命令就可以将一个 <code>mp3</code> 文件转换成 <code>caf</code> 文件：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>afconvert unbelievable.mp3 unbelievable.caf -d ima4 -f caff -v</span></code></pre></td></tr></table></div></figure>


<p>转换完成后就可以将 <code>unbelievable.caf</code> 这个文件拖入 Xcode 工程中，编译运行项目在真机上。</p>

<p><img src="http://lengmolehongyan.github.io/images/QQ20151226-0@2x.png" alt="将 unbelievable.caf 文件拖入工程中" /></p>

<p>发送推送通知时，只需配置 <code>sound</code> 字段的值为导入到工程中的音频文件名，这里即就是 <code>unbelievable.caf</code>。</p>

<p>测试~~，完美！！！收到推送时，通知声音就是我们自定义的声音了。</p>

<p><img src="http://lengmolehongyan.github.io/images/QQ20151226-1@2x.png" alt="收到推送信息" /></p>

<p><a href="https://github.com/lengmolehongyan/CustomAlertSoundsDemo">Demo 地址</a></p>

<p class='post-footer'>
            原始地址：
            <a href='http://lengmolehongyan.github.io/blog/2015/12/25/zi-ding-yi-tong-zhi-sheng-yin/'>http://lengmolehongyan.github.io/blog/2015/12/25/zi-ding-yi-tong-zhi-sheng-yin/</a><br/>
            written by <a href='http://lengmolehongyan.github.io'>冷漠叻荭颜</a>
            &nbsp;posted at <a href='http://lengmolehongyan.github.io'>http://lengmolehongyan.github.io</a>
            </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode 项目忽略警告]]></title>
    <link href="http://lengmolehongyan.github.io/blog/2015/12/09/hu-lue-jing-gao/"/>
    <updated>2015-12-09T23:26:54+08:00</updated>
    <id>http://lengmolehongyan.github.io/blog/2015/12/09/hu-lue-jing-gao</id>
    <content type="html"><![CDATA[<p>对于一个有强迫症的我，每次 <code>⌘B</code> Build 项目时，发现一个 <img src="http://lengmolehongyan.github.io/images/DVTStatus-Warning@2x.png" width="30"> 警告都要点进去修复了，然而，对于一些无关紧要的警告，我们是否可以选择忽略这个警告，让 Xcode 不提示呢？答案当然是可以的。</p>

<p>下面，就介绍一下在项目中忽略警告的三个地方：</p>

<!--more-->


<h2>在源文件中忽略警告</h2>

<p>在一些第三方库中，总能看到下面这段代码的身影，这就是用于忽略某个警告</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#pragma clang diagnostic push</span>
</span><span class='line'><span class="cp">#pragma clang diagnostic ignored &quot;警告标识符&quot;</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="cp">#pragma clang diagnostic pop</span>
</span></code></pre></td></tr></table></div></figure>


<p>用法很简单，比如在控制器的 <code>-viewDidLoad</code> 中写了句创建一个 <code>eTestView</code> 的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">UIView</span> <span class="o">*</span><span class="n">eTestView</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIView</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>Xcode 会立即报一个警告，提示我们没有使用这个变量</p>

<p><img src="http://lengmolehongyan.github.io/images/QQ20151213-0@2x.png" alt="Unused variable 'eTestView'" /></p>

<p>只需在创建 <code>eTestView</code> 的前后加上如下几行，黄色警告就消失了😄</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#pragma clang diagnostic push</span>
</span><span class='line'><span class="cp">#pragma clang diagnostic ignored &quot;-Wunused-variable&quot;</span>
</span><span class='line'><span class="bp">UIView</span> <span class="o">*</span><span class="n">eTestView</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIView</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="cp">#pragma clang diagnostic pop</span>
</span></code></pre></td></tr></table></div></figure>


<p>至于警告标识符，鼠标点几下就可以找到。</p>

<p>如下图，右击某个警告，选择 <code>Reveal in Log</code>（有时这个选项可能是置灰状态，不能选择，可以尝试编译下项目，或者退出 Xcode 重新来一次）</p>

<p><img src="http://lengmolehongyan.github.io/images/QQ20151213-1@2x.png" alt="Reveal in Log" /></p>

<p>下图红色框中，中括号内部的就是警告标识符（先要点击右上角展开警告才能看到这一大堆信息）</p>

<p><img src="http://lengmolehongyan.github.io/images/QQ20151213-2@2x.png" alt="警告标识符" /></p>

<h2>在 Build Settings 中项目全局忽略警告</h2>

<p>在项目的 <code>Build Settings</code> 中也可以设置忽略某种或多种类型的警告，不过在这设置的影响范围就是整个项目的了，要三思而后行，不然就是给自己挖坑。</p>

<p>还是上面的例子，在 <code>Build Settings</code> 中找到 <code>Custom Compiler Flags</code>，双击 <code>Other Warning Flags</code>（可以配置 <code>Debug</code> 和 <code>Release</code> 环境），填入 <code>-Wno-unused-variable</code>，完成后，编译项目，项目中所有的此类型警告都没有了。</p>

<p><img src="http://lengmolehongyan.github.io/images/QQ20151213-4@2x.png" alt="Build Settings 中项目全局忽略警告" /></p>

<p>这里所填写的内容规则，仅仅是在第一种方法中找到的警告标识符中的 <code>W</code> 字母后面加上 <code>no-</code> 就可以了。</p>

<h2>CocoaPods 导入第三方库忽略警告</h2>

<p>通过 CocoaPods 给项目导入了一些第三方库，这些库里面或多或少会有些警告，想消除这些警告，很简单，只需在 <code>Podfile</code> 中加上这一句 <code>inhibit_all_warnings!</code>，所有通过 CocoaPods 安装的第三库的警告就没有了。</p>

<p class='post-footer'>
            原始地址：
            <a href='http://lengmolehongyan.github.io/blog/2015/12/09/hu-lue-jing-gao/'>http://lengmolehongyan.github.io/blog/2015/12/09/hu-lue-jing-gao/</a><br/>
            written by <a href='http://lengmolehongyan.github.io'>冷漠叻荭颜</a>
            &nbsp;posted at <a href='http://lengmolehongyan.github.io'>http://lengmolehongyan.github.io</a>
            </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[计算代码执行时间差]]></title>
    <link href="http://lengmolehongyan.github.io/blog/2015/12/05/ji-suan-dai-ma-zhi-xing-shi-jian-chai/"/>
    <updated>2015-12-05T23:53:21+08:00</updated>
    <id>http://lengmolehongyan.github.io/blog/2015/12/05/ji-suan-dai-ma-zhi-xing-shi-jian-chai</id>
    <content type="html"><![CDATA[<p>开发中，有时候我们需要知道某个效果到底耗时多长时间，可能想到用 <code>Foundation</code> 框架中的 <code>NSDate</code> 类来计算，比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSDate</span> <span class="o">*</span><span class="n">previousDate</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSDate</span> <span class="n">date</span><span class="p">];</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="n">NSTimeInterval</span> <span class="n">timeInterval</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSDate</span> <span class="n">date</span><span class="p">]</span> <span class="nl">timeIntervalSinceDate</span><span class="p">:</span><span class="n">previousDate</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>在 <code>CoreFoundation</code> 框架中，有一个函数返回当前系统的绝对时间，也可以用做计算时间差。如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">CFAbsoluteTime</span> <span class="n">previousTime</span> <span class="o">=</span> <span class="n">CFAbsoluteTimeGetCurrent</span><span class="p">();</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="n">CFAbsoluteTime</span> <span class="n">currentTime</span> <span class="o">=</span> <span class="n">CFAbsoluteTimeGetCurrent</span><span class="p">();</span>
</span><span class='line'><span class="n">CFAbsoluteTime</span> <span class="n">timeInterval</span> <span class="o">=</span> <span class="n">currentTime</span> <span class="o">-</span> <span class="n">previousTime</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<p class='post-footer'>
            原始地址：
            <a href='http://lengmolehongyan.github.io/blog/2015/12/05/ji-suan-dai-ma-zhi-xing-shi-jian-chai/'>http://lengmolehongyan.github.io/blog/2015/12/05/ji-suan-dai-ma-zhi-xing-shi-jian-chai/</a><br/>
            written by <a href='http://lengmolehongyan.github.io'>冷漠叻荭颜</a>
            &nbsp;posted at <a href='http://lengmolehongyan.github.io'>http://lengmolehongyan.github.io</a>
            </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决 Xcode 升级插件失效]]></title>
    <link href="http://lengmolehongyan.github.io/blog/2015/12/03/jie-jue-xcode-sheng-ji-cha-jian-shi-xiao/"/>
    <updated>2015-12-03T23:50:08+08:00</updated>
    <id>http://lengmolehongyan.github.io/blog/2015/12/03/jie-jue-xcode-sheng-ji-cha-jian-shi-xiao</id>
    <content type="html"><![CDATA[<ul>
<li>打开终端，输入以下代码获取到 <code>DVTPlugInCompatibilityUUID</code></li>
</ul>


<p></p>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>defaults read /Applications/Xcode.app/Contents/Info DVTPlugInCompatibilityUUID</span></code></pre></td></tr></table></div></figure>


<ul>
<li>然后输入如下命令，最后一项是上一步获取到的 <code>DVTPlugInCompatibilityUUID</code></li>
</ul>


<p></p>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>find ~/Library/Application\ Support/Developer/Shared/Xcode/Plug-ins -name Info.plist -maxdepth 3 | xargs -I{} defaults write {} DVTPlugInCompatibilityUUIDs -array-add 此处为上一步获得的 UUID</span></code></pre></td></tr></table></div></figure>


<ul>
<li>终端执行完上面命令后，打开 Xcode，会有下图提示，点击 <code>Load Bundles</code>，就会加载 Xcode 插件目录中已安装的插件。</li>
</ul>


<p></p>




<!--more-->


<p><img src="http://lengmolehongyan.github.io/images/QQ20151204-0@2x.png" alt="Load Bundles" /></p>

<p>~~~ 😊 OVER 😊 ~~~</p>

<p class='post-footer'>
            原始地址：
            <a href='http://lengmolehongyan.github.io/blog/2015/12/03/jie-jue-xcode-sheng-ji-cha-jian-shi-xiao/'>http://lengmolehongyan.github.io/blog/2015/12/03/jie-jue-xcode-sheng-ji-cha-jian-shi-xiao/</a><br/>
            written by <a href='http://lengmolehongyan.github.io'>冷漠叻荭颜</a>
            &nbsp;posted at <a href='http://lengmolehongyan.github.io'>http://lengmolehongyan.github.io</a>
            </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Can't Add Self as Subview 崩溃解决办法]]></title>
    <link href="http://lengmolehongyan.github.io/blog/2015/10/30/cant-add-self-as-subview-beng-kui-jie-jue-ban-fa/"/>
    <updated>2015-10-30T23:14:49+08:00</updated>
    <id>http://lengmolehongyan.github.io/blog/2015/10/30/cant-add-self-as-subview-beng-kui-jie-jue-ban-fa</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>查看项目的崩溃汇总，一直有一个 bug 存在，之前也有注意过，只因这个 bug 的崩溃堆栈日志解析出来并没有什么卵用，也不知该怎么复现，就撂下了。</p>

<p>但现在这个 bug 崩溃发生次数蹭蹭涨，崩溃占比高了起来，不得不重视起来。</p>

<p>点进崩溃详情，只有短短的一句 <code>Can't add self as subview</code>。</p>

<!--more-->


<p>崩溃调用堆栈解析出来如下：</p>

<p><img src="http://7xjhyk.com1.z0.glb.clouddn.com/QQ20151031-0@2x.png" alt="崩溃调用堆栈解析" /></p>

<p>对解决问题根本起不了作用，只能依靠 Google 了。</p>

<h2>bug 复现</h2>

<p>在 StackOverflow 上找到复现此 bug 的方法，尝试同时 <code>push</code> 两个控制器，或者同时 <code>push</code> 和 <code>pop</code> 一个控制器。</p>

<p><img src="http://i.stack.imgur.com/93n6V.png" alt="测试同时 push 两个控制器" /></p>

<p>上图是当时一回答此问题人的运行结果，但现在测试并不会引起崩溃，不过同时 <code>push</code> 一个控制器是会导致崩溃的，测试结果如下图：</p>

<p><img src="http://7xjhyk.com1.z0.glb.clouddn.com/QQ20151105-0@2x.png" alt="测试同时 push 一个控制器" /></p>

<h2>解决办法</h2>

<p>创建一个分类，拦截控制器入栈\出栈的方法调用，通过安全的方式，确保当有控制器正在进行入栈\出栈操作时，没有其他入栈\出栈操作。</p>

<p>此分类用到运行时 (Runtime) 的方法交换 <code>Method Swizzling</code>，因此只需要复制下面的代码到自己的项目中，此 bug 就不复存在了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;UINavigationController+Consistent.h&quot;</span>
</span><span class='line'><span class="cp">#import &lt;objc/runtime.h&gt;</span>
</span><span class='line'><span class="c1">/// This char is used to add storage for the isPushingViewController property.</span>
</span><span class='line'><span class="k">static</span> <span class="kt">char</span> <span class="k">const</span> <span class="o">*</span> <span class="k">const</span> <span class="n">ObjectTagKey</span> <span class="o">=</span> <span class="s">&quot;ObjectTag&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="bp">UINavigationController</span> <span class="p">()</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">readwrite</span><span class="p">,</span><span class="k">getter</span> <span class="o">=</span> <span class="n">isViewTransitionInProgress</span><span class="p">)</span> <span class="kt">BOOL</span> <span class="n">viewTransitionInProgress</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="bp">UINavigationController</span> <span class="nl">(Consistent)</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setViewTransitionInProgress:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">property</span> <span class="p">{</span>
</span><span class='line'>    <span class="bp">NSNumber</span> <span class="o">*</span><span class="n">number</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSNumber</span> <span class="nl">numberWithBool</span><span class="p">:</span><span class="n">property</span><span class="p">];</span>
</span><span class='line'>    <span class="n">objc_setAssociatedObject</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">ObjectTagKey</span><span class="p">,</span> <span class="n">number</span> <span class="p">,</span> <span class="n">OBJC_ASSOCIATION_RETAIN</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isViewTransitionInProgress</span> <span class="p">{</span>
</span><span class='line'>    <span class="bp">NSNumber</span> <span class="o">*</span><span class="n">number</span> <span class="o">=</span> <span class="n">objc_getAssociatedObject</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">ObjectTagKey</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">number</span> <span class="n">boolValue</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark - Intercept Pop, Push, PopToRootVC</span>
</span><span class='line'><span class="c1">/// @name Intercept Pop, Push, PopToRootVC</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nf">safePopToRootViewControllerAnimated:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">viewTransitionInProgress</span><span class="p">)</span> <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">animated</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">viewTransitionInProgress</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">//-- This is not a recursion, due to method swizzling the call below calls the original  method.</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">safePopToRootViewControllerAnimated</span><span class="p">:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nf">safePopToViewController:</span><span class="p">(</span><span class="bp">UIViewController</span> <span class="o">*</span><span class="p">)</span><span class="nv">viewController</span> <span class="nf">animated:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">viewTransitionInProgress</span><span class="p">)</span> <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">animated</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">viewTransitionInProgress</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">//-- This is not a recursion, due to method swizzling the call below calls the original  method.</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">safePopToViewController</span><span class="p">:</span><span class="n">viewController</span> <span class="nl">animated</span><span class="p">:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">UIViewController</span> <span class="o">*</span><span class="p">)</span><span class="nf">safePopViewControllerAnimated:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">viewTransitionInProgress</span><span class="p">)</span> <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">animated</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">viewTransitionInProgress</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">//-- This is not a recursion, due to method swizzling the call below calls the original  method.</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">safePopViewControllerAnimated</span><span class="p">:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">safePushViewController:</span><span class="p">(</span><span class="bp">UIViewController</span> <span class="o">*</span><span class="p">)</span><span class="nv">viewController</span> <span class="nf">animated:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//-- If we are already pushing a view controller, we dont push another one.</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">isViewTransitionInProgress</span> <span class="o">==</span> <span class="nb">NO</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//-- This is not a recursion, due to method swizzling the call below calls the original  method.</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span> <span class="nl">safePushViewController</span><span class="p">:</span><span class="n">viewController</span> <span class="nl">animated</span><span class="p">:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">animated</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">viewTransitionInProgress</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// This is confirmed to be App Store safe.</span>
</span><span class='line'><span class="c1">// If you feel uncomfortable to use Private API, you could also use the delegate method navigationController:didShowViewController:animated:.</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">safeDidShowViewController:</span><span class="p">(</span><span class="bp">UIViewController</span> <span class="o">*</span><span class="p">)</span><span class="nv">viewController</span> <span class="nf">animated:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//-- This is not a recursion. Due to method swizzling this is calling the original method.</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="nl">safeDidShowViewController</span><span class="p">:</span><span class="n">viewController</span> <span class="nl">animated</span><span class="p">:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">viewTransitionInProgress</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// If the user doesnt complete the swipe-to-go-back gesture, we need to intercept it and set the flag to NO again.</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">navigationController:</span><span class="p">(</span><span class="bp">UINavigationController</span> <span class="o">*</span><span class="p">)</span><span class="nv">navigationController</span> <span class="nf">willShowViewController:</span><span class="p">(</span><span class="bp">UIViewController</span> <span class="o">*</span><span class="p">)</span><span class="nv">viewController</span> <span class="nf">animated:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">id</span><span class="o">&lt;</span><span class="bp">UIViewControllerTransitionCoordinator</span><span class="o">&gt;</span> <span class="n">tc</span> <span class="o">=</span> <span class="n">navigationController</span><span class="p">.</span><span class="n">topViewController</span><span class="p">.</span><span class="n">transitionCoordinator</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">tc</span> <span class="nl">notifyWhenInteractionEndsUsingBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="bp">UIViewControllerTransitionCoordinatorContext</span><span class="o">&gt;</span> <span class="n">context</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">viewTransitionInProgress</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">//--Reenable swipe back gesture.</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">interactivePopGestureRecognizer</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="bp">UIGestureRecognizerDelegate</span><span class="o">&gt;</span><span class="p">)</span><span class="n">viewController</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">interactivePopGestureRecognizer</span> <span class="nl">setEnabled</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'>    <span class="c1">//-- Method swizzling wont work in the case of a delegate so:</span>
</span><span class='line'>    <span class="c1">//-- forward this method to the original delegate if there is one different than ourselves.</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">navigationController</span><span class="p">.</span><span class="n">delegate</span> <span class="o">!=</span> <span class="nb">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">navigationController</span><span class="p">.</span><span class="n">delegate</span> <span class="nl">navigationController</span><span class="p">:</span><span class="n">navigationController</span>
</span><span class='line'>                                     <span class="nl">willShowViewController</span><span class="p">:</span><span class="n">viewController</span>
</span><span class='line'>                                                   <span class="nl">animated</span><span class="p">:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">load</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//-- Exchange the original implementation with our custom one.</span>
</span><span class='line'>    <span class="n">method_exchangeImplementations</span><span class="p">(</span><span class="n">class_getInstanceMethod</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">pushViewController</span><span class="p">:</span><span class="nl">animated</span><span class="p">:)),</span> <span class="n">class_getInstanceMethod</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">safePushViewController</span><span class="p">:</span><span class="nl">animated</span><span class="p">:)));</span>
</span><span class='line'>    <span class="n">method_exchangeImplementations</span><span class="p">(</span><span class="n">class_getInstanceMethod</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">didShowViewController</span><span class="p">:</span><span class="nl">animated</span><span class="p">:)),</span> <span class="n">class_getInstanceMethod</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">safeDidShowViewController</span><span class="p">:</span><span class="nl">animated</span><span class="p">:)));</span>
</span><span class='line'>    <span class="n">method_exchangeImplementations</span><span class="p">(</span><span class="n">class_getInstanceMethod</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">popViewControllerAnimated</span><span class="p">:)),</span> <span class="n">class_getInstanceMethod</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">safePopViewControllerAnimated</span><span class="p">:)));</span>
</span><span class='line'>    <span class="n">method_exchangeImplementations</span><span class="p">(</span><span class="n">class_getInstanceMethod</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">popToRootViewControllerAnimated</span><span class="p">:)),</span> <span class="n">class_getInstanceMethod</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">safePopToRootViewControllerAnimated</span><span class="p">:)));</span>
</span><span class='line'>    <span class="n">method_exchangeImplementations</span><span class="p">(</span><span class="n">class_getInstanceMethod</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">popToViewController</span><span class="p">:</span><span class="nl">animated</span><span class="p">:)),</span> <span class="n">class_getInstanceMethod</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="k">@selector</span><span class="p">(</span><span class="nl">safePopToViewController</span><span class="p">:</span><span class="nl">animated</span><span class="p">:)));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<p class='post-footer'>
            原始地址：
            <a href='http://lengmolehongyan.github.io/blog/2015/10/30/cant-add-self-as-subview-beng-kui-jie-jue-ban-fa/'>http://lengmolehongyan.github.io/blog/2015/10/30/cant-add-self-as-subview-beng-kui-jie-jue-ban-fa/</a><br/>
            written by <a href='http://lengmolehongyan.github.io'>冷漠叻荭颜</a>
            &nbsp;posted at <a href='http://lengmolehongyan.github.io'>http://lengmolehongyan.github.io</a>
            </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FMDB 使用方法]]></title>
    <link href="http://lengmolehongyan.github.io/blog/2015/10/22/fmdb-xue-xi-zong-jie/"/>
    <updated>2015-10-22T22:41:56+08:00</updated>
    <id>http://lengmolehongyan.github.io/blog/2015/10/22/fmdb-xue-xi-zong-jie</id>
    <content type="html"><![CDATA[<blockquote><p>优秀的第三方库，README 也是很优秀的，理解了 README，会对使用带来很多便利。</p></blockquote>

<h2>ARC 和 MRC</h2>

<p>项目中使用 ARC 还是 MRC，对使用 FMDB 都没有任何影响，FMDB 会在编译项目时自动匹配。</p>

<h2>使用</h2>

<p>在 FMDB 中有三个重要的类：</p>

<ol>
<li><code>FMDatabase</code>：是一个提供 SQLite 数据库的类，用于执行 SQL 语句。</li>
<li><code>FMResultSet</code>：用在 <code>FMDatabase</code> 中执行查询的结果的类。</li>
<li><code>FMDatabaseQueue</code>：在多线程下查询和更新数据库用到的类。</li>
</ol>


<p></p>




<!--more-->


<h2>数据库创建</h2>

<p><code>FMDatabase</code> 是通过一个 SQLite 数据库文件路径创建的，此路径可以是以下三者之一：</p>

<ol>
<li>一个文件的系统路径。磁盘中可以不存在此文件，因为如果不存在会自动为你创建。</li>
<li>一个空的字符串 <code>@""</code>。会在临时位置创建一个空的数据库，当 <code>FMDatabase</code> 连接关闭时，该数据库会被删除。</li>
<li><code>NULL</code>。会在内存中创建一个数据库，当 <code>FMDatabase</code> 连接关闭时，该数据库会被销毁。</li>
</ol>


<p></p>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 创建数据库示例</span>
</span><span class='line'><span class="n">FMDatabase</span> <span class="o">*</span><span class="n">db</span> <span class="o">=</span> <span class="p">[</span><span class="n">FMDatabase</span> <span class="nl">databaseWithPath</span><span class="p">:</span><span class="s">@&quot;/tmp/tmp.db&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h2>打开数据库</h2>

<p>数据库必须是打开状态，才能与之交互。如果没有足够的资源和权限来打开\创建数据库，数据库会打开失败。</p>

<h2>数据库更新</h2>

<p>SQL 语句中除过 <code>SELECT</code> 语句都可以称之为更新操作。包括 <code>CREATE</code>，<code>UPDATE</code>，<code>INSERT</code>，<code>ALTER</code>，<code>COMMIT</code>，<code>BEGIN</code>，<code>DETACH</code>，<code>DROP</code>，<code>END</code>，<code>EXPLAIN</code>，<code>VACUUM</code>，<code>REPLACE</code> 等。一般只要不是以 <code>SELECT</code> 开头的 SQL 语句，都是更新语句。</p>

<p>执行更新语句后会返回一个 <code>BOOL</code> 值，返回 <code>YES</code> 表示执行更新语句成功，返回 <code>NO</code> 表示出现错误，可以通过调用 <code>-lastErrorMessage</code> 和 <code>-lastErrorCode</code> 方法获取更多错误信息。</p>

<h2>数据库查询</h2>

<p>通过调用 <code>-executeQuery...</code> 方法之一执行 <code>SELECT</code> 语句进行数据库查询操作。</p>

<p>执行查询操作后，如果成功会返回一个 <code>FMResultSet</code> 对象，反之会返回 <code>nil</code>。通过 <code>-lastErrorMessage</code> 和 <code>-lastErrorCode</code> 方法可以确定为什么会查询失败。</p>

<p>为了遍历查询结果，需要 <code>while()</code> 循环，然后逐条记录查看。在 FMDB 中，可以通过下面的简单方式实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">FMResultSet</span> <span class="o">*</span><span class="n">s</span> <span class="o">=</span> <span class="p">[</span><span class="n">db</span> <span class="nl">executeQuery</span><span class="p">:</span><span class="s">@&quot;SELECT * FROM myTable&quot;</span><span class="p">];</span>
</span><span class='line'><span class="k">while</span> <span class="p">([</span><span class="n">s</span> <span class="n">next</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 每天记录的检索值</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>即使只需要获取一个数据，也还是必须在访问查询结果前调用 <code>-[FMResultSet next]</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 示例</span>
</span><span class='line'><span class="n">FMResultSet</span> <span class="o">*</span><span class="n">s</span> <span class="o">=</span> <span class="p">[</span><span class="n">db</span> <span class="nl">executeQuery</span><span class="p">:</span><span class="s">@&quot;SELECT COUNT(*) FROM myTable&quot;</span><span class="p">];</span>
</span><span class='line'><span class="k">if</span> <span class="p">([</span><span class="n">s</span> <span class="n">next</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">totalCount</span> <span class="o">=</span> <span class="p">[</span><span class="n">s</span> <span class="nl">intForColumnIndex</span><span class="p">:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>FMResultSet</code> 提供了很多方便的方法来查询数据：</p>

<ul>
<li><code>intForColumn:</code></li>
<li><code>longForColumn:</code></li>
<li><code>longLongIntForColumn:</code></li>
<li><code>boolForColumn:</code></li>
<li><code>doubleForColumn:</code></li>
<li><code>stringForColumn:</code></li>
<li><code>dateForColumn:</code></li>
<li><code>dataForColumn:</code></li>
<li><code>dataNoCopyForColumn:</code></li>
<li><code>UTF8StringForColumn:</code></li>
<li><code>objectForColumn:</code></li>
</ul>


<p></p>


<p>这些方法都有一个 <code>{type}ForColumnIndex:</code> 变体，是基于列的位置来查询数据。</p>

<p>通常情况下，一个 <code>FMResultSet</code> 没有必要手动 <code>-close</code>，因为结果集合 (result set) 被释放或者源数据库关闭会自动关闭。</p>

<h2>关闭数据库</h2>

<p>当对数据库进行查询和更新操作完成后，需要调用 <code>-close</code> 关闭数据库 <code>FMDatabase</code> 的连接。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 示例</span>
</span><span class='line'><span class="p">[</span><span class="n">db</span> <span class="n">close</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h2>事务</h2>

<p><code>FMDatabase</code> 可以通过调用方法来开始和提交事务，也可以通过执行开始\结束事务  (begin\end transaction) 语句。</p>

<h2>多语句和批处理</h2>

<p><code>FMDatabase</code> 可以通过 <code>-executeStatements:withResultBlock:</code> 方法在一个字符串中执行多语句。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 示例</span>
</span><span class='line'><span class="bp">NSString</span> <span class="o">*</span><span class="n">sql</span> <span class="o">=</span> <span class="s">@&quot;create table bulktest1 (id integer primary key autoincrement, x text);&quot;</span>
</span><span class='line'>                 <span class="s">&quot;create table bulktest2 (id integer primary key autoincrement, y text);&quot;</span>
</span><span class='line'>                 <span class="s">&quot;create table bulktest3 (id integer primary key autoincrement, z text);&quot;</span>
</span><span class='line'>                 <span class="s">&quot;insert into bulktest1 (x) values (&#39;XXX&#39;);&quot;</span>
</span><span class='line'>                 <span class="s">&quot;insert into bulktest2 (y) values (&#39;YYY&#39;);&quot;</span>
</span><span class='line'>                 <span class="s">&quot;insert into bulktest3 (z) values (&#39;ZZZ&#39;);&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">success</span> <span class="o">=</span> <span class="p">[</span><span class="n">db</span> <span class="nl">executeStatements</span><span class="p">:</span><span class="n">sql</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">sql</span> <span class="o">=</span> <span class="s">@&quot;select count(*) as count from bulktest1;&quot;</span>
</span><span class='line'>       <span class="s">&quot;select count(*) as count from bulktest2;&quot;</span>
</span><span class='line'>       <span class="s">&quot;select count(*) as count from bulktest3;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">success</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">db</span> <span class="nl">executeStatements</span><span class="p">:</span><span class="n">sql</span> <span class="nl">withResultBlock</span><span class="p">:</span><span class="o">^</span><span class="kt">int</span><span class="p">(</span><span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">dictionary</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="bp">NSInteger</span> <span class="n">count</span> <span class="o">=</span> <span class="p">[</span><span class="n">dictionary</span><span class="p">[</span><span class="s">@&quot;count&quot;</span><span class="p">]</span> <span class="n">integerValue</span><span class="p">];</span>
</span><span class='line'>    <span class="n">XCTAssertEqual</span><span class="p">(</span><span class="n">count</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s">@&quot;expected one record for dictionary %@&quot;</span><span class="p">,</span> <span class="n">dictionary</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<h2>数据处理</h2>

<p>当给 FMDB 提供 SQL 语句时，在插入前不应该处理任何数据，而应该使用标准的 SQLite 的绑定语法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="o">//</span> <span class="err">示例</span>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">myTable</span> <span class="k">VALUES</span> <span class="p">(</span><span class="o">?</span><span class="p">,</span> <span class="o">?</span><span class="p">,</span> <span class="o">?</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>?</code> 问号在 SQLite 中意为即将插入的值的占位符，FMDB 执行语句的方法都接受多个参数 (或者参数集合，比如 <code>NSArray</code>，<code>NSDictionary</code>，<code>va_list</code>)，它们都会正确转义。</p>

<p>也可以使用命名参数语法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="o">//</span> <span class="err">示例</span>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">myTable</span> <span class="k">VALUES</span> <span class="p">(:</span><span class="n">id</span><span class="p">,</span> <span class="p">:</span><span class="n">name</span><span class="p">,</span> <span class="p">:</span><span class="n">value</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这些参数必须以冒号开头，SQLite 自身支持其他字符，但是命名时字典的键内部以冒号开头，就不能在你的字典的键中包含冒号。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 示例</span>
</span><span class='line'><span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">argsDict</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSDictionary</span> <span class="nl">dictionaryWithObjectsAndKeys</span><span class="p">:</span><span class="s">@&quot;My Name&quot;</span><span class="p">,</span> <span class="s">@&quot;name&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">db</span> <span class="nl">executeUpdate</span><span class="p">:</span><span class="s">@&quot;INSERT INTO myTable (name) VALUES (:name)&quot;</span> <span class="nl">withParameterDictionary</span><span class="p">:</span><span class="n">argsDict</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>因此，不应该写类似下面这行一样的错误代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 错误示例</span>
</span><span class='line'><span class="p">[</span><span class="n">db</span> <span class="nl">executeUpdate</span><span class="p">:[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;INSERT INTO myTable VALUES (%@)&quot;</span><span class="p">,</span> <span class="s">@&quot;this has </span><span class="se">\&quot;</span><span class="s"> lots of &#39; bizarre </span><span class="se">\&quot;</span><span class="s"> quotes &#39;&quot;</span><span class="p">]];</span>
</span></code></pre></td></tr></table></div></figure>


<p>而应该这样写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 正确示例</span>
</span><span class='line'><span class="p">[</span><span class="n">db</span> <span class="nl">executeUpdate</span><span class="p">:</span><span class="s">@&quot;INSERT INTO myTable VALUES (?)&quot;</span><span class="p">,</span> <span class="s">@&quot;this has </span><span class="se">\&quot;</span><span class="s"> lots of &#39; bizarre </span><span class="se">\&quot;</span><span class="s"> quotes &#39;&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>所有传递给 <code>-executeUpdate:</code> 方法的参数都必须是对象。下面写法执行不会起作用而且会引发崩溃：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 错误示例</span>
</span><span class='line'><span class="p">[</span><span class="n">db</span> <span class="nl">executeUpdate</span><span class="p">:</span><span class="s">@&quot;INSERT INTO myTable VALUES (?)&quot;</span><span class="p">,</span> <span class="mi">42</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>插入一个数的正确方法是把这个数字包装成 <code>NSNumber</code> 对象：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 正确示例</span>
</span><span class='line'><span class="p">[</span><span class="n">db</span> <span class="nl">executeUpdate</span><span class="p">:</span><span class="s">@&quot;INSERT INTO myTable VALUES (?)&quot;</span><span class="p">,</span> <span class="p">[</span><span class="bp">NSNumber</span> <span class="nl">numberWithInt</span><span class="p">:</span><span class="mi">42</span><span class="p">]];</span>
</span></code></pre></td></tr></table></div></figure>


<p>也可以使用 <code>-execute*WithFormat:</code> 这个方法将数字转换成字符串：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 转换成字符串示例</span>
</span><span class='line'><span class="p">[</span><span class="n">db</span> <span class="nl">executeUpdateWithFormat</span><span class="p">:</span><span class="s">@&quot;INSERT INTO myTable VALUES (@d)&quot;</span><span class="p">,</span> <span class="mi">42</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>-execute*WithFormat:</code> 这些方法后面都可以接格式字符串参数，以下 % 百分号格式符都是可以识别的：<code>%@</code>, <code>%c</code>, <code>%s</code>, <code>%d</code>, <code>%D</code>, <code>%i</code>, <code>%u</code>, <code>%U</code>, <code>%hi</code>, <code>%hu</code>, <code>%qi</code>, <code>%qu</code>, <code>%f</code>, <code>%g</code>, <code>%ld</code>, <code>%lu</code>, <code>%lld</code>, <code>%llu</code>。使用其他格式符可能会出现不可预知的问题。出于某种原因，可能需要在你的 SQL 语句中使用 <code>%</code> 字符，应该使用百分号转义一下 <code>%%</code>。</p>

<h2>FMDatabaseQueue 队列和线程安全</h2>

<p>在多线程中同时使用 FMDatabase 单例是极其错误的想法，会导致每个线程创建一个 FMDatabase 对象。不要跨线程使用单例，也不要同时跨多线程，不然会奔溃或者异常。</p>

<p><em>因此不要实例化一个 FMDatabase 单例来跨线程使用。</em></p>

<p>相反，使用 FMDatabaseQueue，下面就是它的使用方法：</p>

<p>第一，创建队列。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 创建 FMdatabaseQueue 示例</span>
</span><span class='line'><span class="n">FMDatabaseQueue</span> <span class="o">*</span><span class="n">queue</span> <span class="o">=</span> <span class="p">[</span><span class="n">FMDatabaseQueue</span> <span class="nl">databaseQueueWithPath</span><span class="p">:</span><span class="n">aPath</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后这样使用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 示例</span>
</span><span class='line'><span class="p">[</span><span class="n">queue</span> <span class="nl">inDatabase</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="n">FMDatabase</span> <span class="o">*</span><span class="n">db</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">db</span> <span class="nl">executeUpdate</span><span class="p">:</span><span class="s">@&quot;INSERT INTO myTable VALUES (?)&quot;</span><span class="p">,</span> <span class="p">[</span><span class="bp">NSNumber</span> <span class="nl">numberWithInt</span><span class="p">:</span><span class="mi">1</span><span class="p">]];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">db</span> <span class="nl">executeUpdate</span><span class="p">:</span><span class="s">@&quot;INSERT INTO myTable VALUES (?)&quot;</span><span class="p">,</span> <span class="p">[</span><span class="bp">NSNumber</span> <span class="nl">numberWithInt</span><span class="p">:</span><span class="mi">2</span><span class="p">]];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">db</span> <span class="nl">executeUpdate</span><span class="p">:</span><span class="s">@&quot;INSERT INTO myTable VALUES (?)&quot;</span><span class="p">,</span> <span class="p">[</span><span class="bp">NSNumber</span> <span class="nl">numberWithInt</span><span class="p">:</span><span class="mi">3</span><span class="p">]];</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">FMResultSet</span> <span class="o">*</span><span class="n">rs</span> <span class="o">=</span> <span class="p">[</span><span class="n">db</span> <span class="nl">executeQuery</span><span class="p">:</span><span class="s">@&quot;select * from foo&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">([</span><span class="n">rs</span> <span class="n">next</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">...</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>把操作放在事务中也很简单，比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 示例</span>
</span><span class='line'><span class="p">[</span><span class="n">queue</span> <span class="nl">inTransaction</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="n">FMDatabase</span> <span class="o">*</span><span class="n">db</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">rollback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">db</span> <span class="nl">executeUpdate</span><span class="p">:</span><span class="s">@&quot;INSERT INTO myTable VALUES (?)&quot;</span><span class="p">,</span> <span class="p">[</span><span class="bp">NSNumber</span> <span class="nl">numberWithInt</span><span class="p">:</span><span class="mi">1</span><span class="p">]];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">db</span> <span class="nl">executeUpdate</span><span class="p">:</span><span class="s">@&quot;INSERT INTO myTable VALUES (?)&quot;</span><span class="p">,</span> <span class="p">[</span><span class="bp">NSNumber</span> <span class="nl">numberWithInt</span><span class="p">:</span><span class="mi">2</span><span class="p">]];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">db</span> <span class="nl">executeUpdate</span><span class="p">:</span><span class="s">@&quot;INSERT INTO myTable VALUES (?)&quot;</span><span class="p">,</span> <span class="p">[</span><span class="bp">NSNumber</span> <span class="nl">numberWithInt</span><span class="p">:</span><span class="mi">3</span><span class="p">]];</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">whoopsSomethingWrongHappened</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="o">*</span><span class="n">rollback</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>  <span class="p">[</span><span class="n">db</span> <span class="nl">executeUpdate</span><span class="p">:</span><span class="s">@&quot;INSERT INTO myTable VALUES (?)&quot;</span><span class="p">,</span> <span class="p">[</span><span class="bp">NSNumber</span> <span class="nl">numberWithInt</span><span class="p">:</span><span class="mi">4</span><span class="p">]];</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>FMDatabase 将块代码 block 运行在一个串行队列上，即使在多线程同时调用 FMDatabaseQueue 的方法，它们仍然还是顺序执行。这种查询和更新方式不会影响其它，是线程安全的。</p>

<h2>基于 block 自定义 SQLite 函数</h2>

<p>这是可以的，例子可以在 main.m 中的 <code>makeFunctionNamed:</code> 方法查看。</p>

<h2>Swift</h2>

<p>在 Swift 项目中也可以使用 FMDB，需要做以下步骤：</p>

<ol>
<li>将 FMDB 的 <code>.m</code> 和 <code>.h</code> 全部文件拖进你的项目。</li>
<li>如果 Xcode 提示创建桥接文件，需要点击创建。如果没有提示，且项目中也没有桥接文件，需要手动添加。<a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html#//apple_ref/doc/uid/TP40014216-CH10-XID_76">点此查看桥接文件更多信息</a></li>
<li>在桥接文件中，添加这行代码：<code>#import "FMDB.h"</code></li>
<li>可以从 &ldquo;src/extra/Swift Extension&rdquo; 文件夹中拷贝 <code>FMDatabaseVariadic.swift</code> 文件到项目中，就可以使用 <code>executeUpdate</code> 和 <code>executeQuery</code> 多参数了。</li>
</ol>


<p></p>


<p>做完上述几步，就可以使用 FMDatabase 写 Swift 代码了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// 示例</span>
</span><span class='line'><span class="k">let</span> <span class="n">documentsFolder</span> <span class="o">=</span> <span class="n">NSSearchPathForDirectoriesInDomains</span><span class="p">(.</span><span class="n">DocumentDirectory</span><span class="p">,</span> <span class="p">.</span><span class="n">UserDomainMask</span><span class="p">,</span> <span class="nb">true</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="kt">as</span> <span class="n">String</span>
</span><span class='line'><span class="k">let</span> <span class="n">path</span> <span class="o">=</span> <span class="n">documentsFolder</span><span class="p">.</span><span class="n">stringByAppendingPathComponent</span><span class="p">(</span><span class="s">&quot;test.sqlite&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">database</span> <span class="o">=</span> <span class="n">FMDatabase</span><span class="p">(</span><span class="nl">path</span><span class="p">:</span> <span class="n">path</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">!</span><span class="n">database</span><span class="p">.</span><span class="n">open</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Unable to open database&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">!</span><span class="n">database</span><span class="p">.</span><span class="n">executeUpdate</span><span class="p">(</span><span class="s">&quot;create table test(x text, y text, z text)&quot;</span><span class="p">,</span> <span class="nl">withArgumentsInArray</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;create table failed: \(database.lastErrorMessage())&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">!</span><span class="n">database</span><span class="p">.</span><span class="n">executeUpdate</span><span class="p">(</span><span class="s">&quot;insert into test (x, y, z) values (?, ?, ?)&quot;</span><span class="p">,</span> <span class="nl">withArgumentsInArray</span><span class="p">:</span> <span class="p">[</span><span class="s">&quot;a&quot;</span><span class="p">,</span> <span class="s">&quot;b&quot;</span><span class="p">,</span> <span class="s">&quot;c&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;insert 1 table failed: \(database.lastErrorMessage())&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">!</span><span class="n">database</span><span class="p">.</span><span class="n">executeUpdate</span><span class="p">(</span><span class="s">&quot;insert into test (x, y, z) values (?, ?, ?)&quot;</span><span class="p">,</span> <span class="nl">withArgumentsInArray</span><span class="p">:</span> <span class="p">[</span><span class="s">&quot;e&quot;</span><span class="p">,</span> <span class="s">&quot;f&quot;</span><span class="p">,</span> <span class="s">&quot;g&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;insert 2 table failed: \(database.lastErrorMessage())&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="k">let</span> <span class="n">rs</span> <span class="o">=</span> <span class="n">database</span><span class="p">.</span><span class="n">executeQuery</span><span class="p">(</span><span class="s">&quot;select x, y, z from test&quot;</span><span class="p">,</span> <span class="nl">withArgumentsInArray</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">rs</span><span class="p">.</span><span class="n">next</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">x</span> <span class="o">=</span> <span class="n">rs</span><span class="p">.</span><span class="n">stringForColumn</span><span class="p">(</span><span class="s">&quot;x&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">y</span> <span class="o">=</span> <span class="n">rs</span><span class="p">.</span><span class="n">stringForColumn</span><span class="p">(</span><span class="s">&quot;y&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">z</span> <span class="o">=</span> <span class="n">rs</span><span class="p">.</span><span class="n">stringForColumn</span><span class="p">(</span><span class="s">&quot;z&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;x = \(x); y = \(y); z = \(z)&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;select failed: \(database.lastErrorMessage())&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">database</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>本文实际是对 <a href="https://github.com/ccgus/fmdb">FMDB</a> 的 README 简单翻译，以方便使用 FMDB。</p>

<p class='post-footer'>
            原始地址：
            <a href='http://lengmolehongyan.github.io/blog/2015/10/22/fmdb-xue-xi-zong-jie/'>http://lengmolehongyan.github.io/blog/2015/10/22/fmdb-xue-xi-zong-jie/</a><br/>
            written by <a href='http://lengmolehongyan.github.io'>冷漠叻荭颜</a>
            &nbsp;posted at <a href='http://lengmolehongyan.github.io'>http://lengmolehongyan.github.io</a>
            </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Directory Not Found for Option]]></title>
    <link href="http://lengmolehongyan.github.io/blog/2015/09/23/ios9-gua-pei/"/>
    <updated>2015-09-23T10:47:48+08:00</updated>
    <id>http://lengmolehongyan.github.io/blog/2015/09/23/ios9-gua-pei</id>
    <content type="html"><![CDATA[<p>在 Xcode7 下编译项目，报了如下警告：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ld: warning: directory not found for option 
</span><span class='line'>'-F/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS9.0.sdk/Developer/Library/Frameworks'</span></code></pre></td></tr></table></div></figure>


<p>这是因为 Xcode7 将 <code>Frameworks</code> 位置改变了。</p>

<!--more-->


<p>点击项目，选择 TARGETS 中的工程名 Tests，然后选择 Build Settings，在 Search Paths 下，可以看到此时 <code>Framework Search Paths</code> 路径，此路径为错误路径。</p>

<p><img src="http://i3.tietuku.com/40d46fe638434b1e.png" alt="" /></p>

<p>双击路径，删除 <code>$(SDKROOT)/Developer/Library/Frameworks</code>，增加 <code>$(PLATFORM_DIR)/Developer/Library/Frameworks</code>，此时路径就已经修改成功。</p>

<p><img src="http://i3.tietuku.com/6b824df6fd5bc002.png" alt="" /></p>

<p>修改完成之后，重新编译项目，此警告就修复了。</p>

<p class='post-footer'>
            原始地址：
            <a href='http://lengmolehongyan.github.io/blog/2015/09/23/ios9-gua-pei/'>http://lengmolehongyan.github.io/blog/2015/09/23/ios9-gua-pei/</a><br/>
            written by <a href='http://lengmolehongyan.github.io'>冷漠叻荭颜</a>
            &nbsp;posted at <a href='http://lengmolehongyan.github.io'>http://lengmolehongyan.github.io</a>
            </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[App Transport Security]]></title>
    <link href="http://lengmolehongyan.github.io/blog/2015/09/21/ios9-gua-pei/"/>
    <updated>2015-09-21T23:37:59+08:00</updated>
    <id>http://lengmolehongyan.github.io/blog/2015/09/21/ios9-gua-pei</id>
    <content type="html"><![CDATA[<p><code>App Transport Security</code> 是一项新的功能，用来提高了应用程序和 <code>web</code> 服务之间连接的安全性。这项功能是从 iOS9.0 和 OSX10.11 之后苹果新增的，要求默认连接最好是安全的连接。当然，应用程序也可以关闭这项功能。</p>

<h4>默认配置</h4>

<p>为 iOS9.0 和 OSX10.11 及之后版本的开发的 apps，用到 <code>NSURLConnection</code>，<code>CFURL</code> 或者 <code>NSURLSession</code> API 的所有连接，将使用 <code>App Transport Security</code> 默认配置。</p>

<!--more-->


<p>&ndash; 未完待续 &ndash;</p>

<p class='post-footer'>
            原始地址：
            <a href='http://lengmolehongyan.github.io/blog/2015/09/21/ios9-gua-pei/'>http://lengmolehongyan.github.io/blog/2015/09/21/ios9-gua-pei/</a><br/>
            written by <a href='http://lengmolehongyan.github.io'>冷漠叻荭颜</a>
            &nbsp;posted at <a href='http://lengmolehongyan.github.io'>http://lengmolehongyan.github.io</a>
            </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KVC 的简单使用]]></title>
    <link href="http://lengmolehongyan.github.io/blog/2015/09/12/kvcde-jian-dan-shi-yong/"/>
    <updated>2015-09-12T22:58:12+08:00</updated>
    <id>http://lengmolehongyan.github.io/blog/2015/09/12/kvcde-jian-dan-shi-yong</id>
    <content type="html"><![CDATA[<h2>KVC 字典转模型</h2>

<ul>
<li>KVC 中经常使用的就是字典转模型</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// NSObject(NSKeyValueCoding) NSObject 的分类</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setValuesForKeysWithDictionary:</span><span class="p">(</span><span class="bp">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">keyedValues</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p><img src="http://i1.tietuku.com/cc3c54dccb414089.png" alt="字典转模型" /></p>

<hr />

<h2>KVC 的大招</h2>

<ul>
<li>KVC 设置对象属性及取值</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setValue:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">value</span> <span class="nf">forKey:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">key</span><span class="p">;</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">valueForKey:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">key</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://i2.tietuku.com/4d55944da6a1bcf7.png" alt="LNPerson类的头文件" />
<img src="http://i1.tietuku.com/12c24aeb2ed198ac.png" alt="KVC设置对象属性及取值" /></p>

<ul>
<li>KVC 间接设置对象属性

<ul>
<li>在运行的时候，KVC 可以间接设置对象的属性，不管对象属性是否在 <code>.h</code> 中公开，当然这违背面向对象设计的 <strong>开闭原则</strong>，严重不建议在程序开发中使用。</li>
</ul>
</li>
</ul>


<p><img src="http://i1.tietuku.com/ec730d8853185ebc.png" alt="LNPerson类的.m文件" />
<img src="http://i1.tietuku.com/b5dba559d850fe72.png" alt="KVC间接设置对象属性" /></p>

<hr />

<h2>KVC 模型转字典</h2>

<ul>
<li>KVC 模型转字典

<ul>
<li>KVC 模型转字典，参数是属性名称的数组。</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// keys 是属性名称的数组</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nf">dictionaryWithValuesForKeys:</span><span class="p">(</span><span class="bp">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nv">keys</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://i2.tietuku.com/8b2fb0382d0bce99.png" alt="KVC模型转字典" /></p>

<hr />

<h2>KVC 核心动画</h2>

<ul>
<li>KVC 最经典的应用——核心动画

<ul>
<li>通过 KVC 设置动画的 <code>KeyPath</code>，在实例化动画的时候，指定图层的可动画属性。</li>
</ul>
</li>
</ul>


<p><img src="http://i1.tietuku.com/2df35a7c17406ce3.png" alt="" />
<img src="http://i1.tietuku.com/1545fe7a18db2738.gif" alt="核心动画" /></p>

<hr />

<p class='post-footer'>
            原始地址：
            <a href='http://lengmolehongyan.github.io/blog/2015/09/12/kvcde-jian-dan-shi-yong/'>http://lengmolehongyan.github.io/blog/2015/09/12/kvcde-jian-dan-shi-yong/</a><br/>
            written by <a href='http://lengmolehongyan.github.io'>冷漠叻荭颜</a>
            &nbsp;posted at <a href='http://lengmolehongyan.github.io'>http://lengmolehongyan.github.io</a>
            </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Block 的简单使用]]></title>
    <link href="http://lengmolehongyan.github.io/blog/2015/09/10/block-de-jian-dan-shi-yong/"/>
    <updated>2015-09-10T23:42:34+08:00</updated>
    <id>http://lengmolehongyan.github.io/blog/2015/09/10/block-de-jian-dan-shi-yong</id>
    <content type="html"><![CDATA[<h3>Block 的介绍</h3>

<ul>
<li>对象与对象之间的通信方式

<ol>
<li><strong>代理-协议</strong>，<strong>通知</strong>，<strong>Block</strong>。</li>
<li>三种通信方式都实现了对象之间的解耦合。</li>
<li>通知的通信方式是 <strong>1对多</strong>。</li>
<li>代理、Block 是 <strong>1对1</strong>。</li>
</ol>
</li>
</ul>


<p></p>


<ul>
<li>Block 介绍

<ol>
<li>Block 是 iOS4.0 之后新增的一种语法结构，也称为“闭包”。</li>
<li>Block 是一个匿名的函数代码块，此代码块可以作为参数传递给其他对象。</li>
<li>可以把 block 当做 Objective-C 的匿名函数，block 是 OC 中的一种数据类型，<code>^</code>是 block 的特有标记。</li>
</ol>
</li>
</ul>


<p></p>


<ul>
<li>Block 格式说明

<ol>
<li><code>(返回类型)(^block名称)(参数类型)=^(参数列表){代码实现};</code>。</li>
<li>如果没有参数，等号后面参数列表的()可以省略。</li>
</ol>
</li>
</ul>


<p></p>




<!--more-->


<h3>Block 的使用</h3>

<ul>
<li>Block 的定义</li>
</ul>


<p><img src="http://i2.tietuku.com/4a270839c9929017.png" alt="定义Block的常见两种方式" /></p>

<ul>
<li>Block 的3种类型

<ol>
<li>不管在 ARC 还是 MRC 环境下，block 内部如果没有访问外部变量，这个 block 是 <strong>全局 block</strong> <code>__NSGlobalBlock__</code>，形式类似函数，存储在内存中的 <strong>代码区</strong>。</li>
<li>在 <strong>MRC</strong> 下，block 内部如果访问外部变量，这个 block 是 <strong>栈 block</strong> <code>__NSStackBlock__</code>，存储在内存中的 <strong>栈</strong> 上。</li>
<li>在 <strong>MRC</strong> 下，block 内部访问外部变量，同时对该 block 做一次 <strong>copy 操作</strong>，这个 block 是 <strong>堆 block</strong> <code>__NSMallocBlock__</code>，存储在内存中的 <strong>堆</strong> 上。</li>
<li>在 <strong>ARC</strong> 下，block 内部如果访问外部变量，这个 block 是 <strong>堆 block</strong> <code>__NSMallocBlock__</code>，存储在内存中的 <strong>堆</strong> 上，因为在 ARC 下，默认对 block 做了一次 copy 操作。</li>
</ol>
</li>
</ul>


<p><img src="http://i2.tietuku.com/8c06ba2fe062559a.png" alt="全局block" />
<img src="http://i2.tietuku.com/bb203edf923cea6b.png" alt="栈block" />
<img src="http://i2.tietuku.com/5c461733e51097cd.png" alt="堆block" /></p>

<ul>
<li>Block 作为方法的参数

<ul>
<li>将 block 作为方法的参数，可以用 block 来封装代码块。</li>
</ul>
</li>
</ul>


<p><img src="http://ww1.sinaimg.cn/large/9491566bjw1erczgvtdkdj211i0d2aep.jpg" alt="block作为方法的参数" /></p>

<ul>
<li>Block 作为属性</li>
</ul>


<p><img src="http://ww4.sinaimg.cn/large/9491566bjw1ercziuw0btj21420hin58.jpg" alt="block作为属性" /></p>

<ul>
<li>Block 的方式遍历数组\字典</li>
</ul>


<p><img src="http://ww1.sinaimg.cn/large/9491566bjw1erd0j2s7stj213s0l2qfl.jpg" alt="block的方式遍历数组\字典" /></p>

<h3>Block 的使用注意</h3>

<ul>
<li>Block 访问外部变量

<ol>
<li>block 内部可以访问外部的变量，block 默认是将其复制到其数据结构中来实现访问的。</li>
<li>默认情况下，block 内部不能修改外面的局部变量，因为通过 block 进行闭包的变量是 const 的。</li>
<li>给局部变量加上 <code>__block</code> 关键字，这个局部变量就可以在 block 内部修改，block 是复制其引用地址来实现访问的。</li>
</ol>
</li>
</ul>


<p><img src="http://ww2.sinaimg.cn/large/9491566bjw1erdasuqz67j216s0kqtl6.jpg" alt="block访问外部变量" /></p>

<ul>
<li>Block 作为属性应该用 copy 修饰

<ol>
<li>当用 weak、assign 修饰 block 属性时，block 访问外部变量，此时 block 的类型是 <strong>栈 block</strong>。保存在栈中的 block，当 block 所在函数\方法返回\结束，该 block 就会被销毁。在其他方法内部调用访问该 block，就会引发野指针错误 <code>EXC_BAD_ACCESS</code>。</li>
<li>当用 copy、strong 修饰 block 属性时，block 访问外部变量，此时 block 的类型是 <strong>堆 block</strong>。保存在堆中的 block，当引用计数器为0时被销毁，该类型 block 是由栈类型的 block 从栈中复制到堆中形成的，因此可以在其他方法内部调用该 block。在 ARC 下，<code>strong</code> 和 <code>copy</code> 都可以用来修饰 block，但是建议修饰 block 属性使用 <code>copy</code>。</li>
</ol>
</li>
</ul>


<p><img src="http://ww1.sinaimg.cn/large/9491566bjw1erdce4hllbj21kw0j2qc7.jpg" alt="weak修饰block" /></p>

<p><img src="http://ww4.sinaimg.cn/large/9491566bjw1erdfvoacrfj214i0jmqbu.jpg" alt="copy修饰block" /></p>

<p>推荐阅读：<a href="http://www.cocoachina.com/ios/20150109/10891.html">Objective-C中的Block</a></p>

<p class='post-footer'>
            原始地址：
            <a href='http://lengmolehongyan.github.io/blog/2015/09/10/block-de-jian-dan-shi-yong/'>http://lengmolehongyan.github.io/blog/2015/09/10/block-de-jian-dan-shi-yong/</a><br/>
            written by <a href='http://lengmolehongyan.github.io'>冷漠叻荭颜</a>
            &nbsp;posted at <a href='http://lengmolehongyan.github.io'>http://lengmolehongyan.github.io</a>
            </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS8 以上定位问题<二>]]></title>
    <link href="http://lengmolehongyan.github.io/blog/2015/08/30/ios8xia-ding-wei-wen-ti-er/"/>
    <updated>2015-08-30T00:19:06+08:00</updated>
    <id>http://lengmolehongyan.github.io/blog/2015/08/30/ios8xia-ding-wei-wen-ti-er</id>
    <content type="html"><![CDATA[<p>接上篇，我们已经可以在系统版本 iOS8 以上完成定位功能，但是会有一个潜在 bug 存在。</p>

<p>进入设置应用，往下滑动找到自己的 app，进入，点击 <strong>位置</strong> 单元格，设置应用会彻底奔溃，回到桌面了。</p>

<!--more-->


<p><img src="http://i3.tietuku.com/8d9493bef4f6a786.png" alt="点击位置崩溃" /></p>

<p>经过一番 Google 和 Stack Overflow 后，问题就出现在 <code>info.plist</code> 文件中的两个缺省字段。</p>

<p>在上一篇博客中，我将 <code>NSLocationWhenInUseUsageDescription</code> 和 <code>NSLocationAlwaysUsageDescription</code> 的类型设置为 <code>Boolean</code>，值设置为 <code>YES</code>，而正确做法是类型设置为 <code>String</code>，值填写一些描述信息，比如：请点击允许以允许访问，若不允许将无法使用 XX 功能。这里面所填写的文字，也会自动出现在位置页面的应用程序说明之后。</p>

<p><img src="http://i3.tietuku.com/3881905e46802e76.png" alt="应用程序说明" /></p>

<p>完成之后，重新编译运行，再去设置那，怎么点都不会崩溃了！Over！</p>

<p class='post-footer'>
            原始地址：
            <a href='http://lengmolehongyan.github.io/blog/2015/08/30/ios8xia-ding-wei-wen-ti-er/'>http://lengmolehongyan.github.io/blog/2015/08/30/ios8xia-ding-wei-wen-ti-er/</a><br/>
            written by <a href='http://lengmolehongyan.github.io'>冷漠叻荭颜</a>
            &nbsp;posted at <a href='http://lengmolehongyan.github.io'>http://lengmolehongyan.github.io</a>
            </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS8 以上定位问题<一>]]></title>
    <link href="http://lengmolehongyan.github.io/blog/2015/07/16/ios8xia-ding-wei-wen-ti/"/>
    <updated>2015-07-16T16:50:38+08:00</updated>
    <id>http://lengmolehongyan.github.io/blog/2015/07/16/ios8xia-ding-wei-wen-ti</id>
    <content type="html"><![CDATA[<p>Xcode6 下，对于系统版本 iOS8 以上版本定位需要自己写授权，不然没有权限定位，即 <code>CLLocationManagerDelegate</code> 代理方法不会执行。</p>

<!--more-->


<p>解决方法：</p>

<p>步骤一：需要在 <code>info.plist</code> 文件中加入下面两个缺省字段，值设置为 <code>YES</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSLocationWhenInUseUsageDescription</span> <span class="c1">// 允许在前台获取 GPS 的描述</span>
</span><span class='line'><span class="n">NSLocationAlwaysUsageDescription</span> <span class="c1">// 允许在前、后台获取 GPS 的描述 </span>
</span></code></pre></td></tr></table></div></figure>


<p>步骤二：判断设备系统版本，如果系统版本大于8.0，设置定位权限。代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;ViewController.h&quot;</span>
</span><span class='line'><span class="cp">#import &lt;CoreLocation/CoreLocation.h&gt;</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> <span class="p">()</span><span class="o">&lt;</span><span class="bp">CLLocationManagerDelegate</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="bp">CLLocationManager</span> <span class="o">*</span><span class="n">locationManager</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">ViewController</span>
</span><span class='line'><span class="c1">// 懒加载初始化 self.locationManager</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nf">locationManager</span><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">_locationManager</span><span class="p">){</span>
</span><span class='line'>        <span class="n">_locationManager</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">CLLocationManager</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>        <span class="n">_locationManager</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_locationManager</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 调用请求</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([[[</span><span class="bp">UIDevice</span> <span class="n">currentDevice</span><span class="p">]</span> <span class="n">systemVersion</span><span class="p">]</span> <span class="n">doubleValue</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mf">8.0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 设置定位权限仅 iOS8 有意义</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="n">requestWhenInUseAuthorization</span><span class="p">];</span> <span class="c1">// 前台定位</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// [locationManager requestAlwaysAuthorization]; // 前后台同时定位</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="n">startUpdatingLocation</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 代理方法</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="bp">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">didUpdateLocations:</span><span class="p">(</span><span class="bp">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nv">locations</span><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%zd&quot;</span><span class="p">,</span> <span class="n">locations</span><span class="p">.</span><span class="n">count</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>至此，iOS8 下定位问题就可以解决了！</p>

<p class='post-footer'>
            原始地址：
            <a href='http://lengmolehongyan.github.io/blog/2015/07/16/ios8xia-ding-wei-wen-ti/'>http://lengmolehongyan.github.io/blog/2015/07/16/ios8xia-ding-wei-wen-ti/</a><br/>
            written by <a href='http://lengmolehongyan.github.io'>冷漠叻荭颜</a>
            &nbsp;posted at <a href='http://lengmolehongyan.github.io'>http://lengmolehongyan.github.io</a>
            </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自定义转场动画介绍(翻译)]]></title>
    <link href="http://lengmolehongyan.github.io/blog/2015/05/30/zi-ding-yi-zhuan-chang-dong-hua-jie-shao-fan-yi/"/>
    <updated>2015-05-30T21:37:02+08:00</updated>
    <id>http://lengmolehongyan.github.io/blog/2015/05/30/zi-ding-yi-zhuan-chang-dong-hua-jie-shao-fan-yi</id>
    <content type="html"><![CDATA[<p><a href="http://www.appcoda.com/custom-view-controller-transitions-tutorial/">英文原文地址</a></p>

<p>仔细观察 iOS 设备上苹果内置的 app，你会发现各种视图控制器转场动画。iOS7 介绍了自定义控制器转场，使开发人员能够在他们的应用中创建自己的转场动画。在本教程中，我们将看到如何做到这一点。我们还将了解怎样通过手势进行交互式转场 <code>interactive transitions</code>。</p>

<!--more-->


<p><img src="http://i1.tietuku.com/41b836336adda5e8.jpg" alt="" /></p>

<h2>开始</h2>

<p>创建自定义转场必须遵循以下三个步骤：</p>

<ol>
<li>创建一个类，遵守 <code>UIViewControllerAnimatedTransitioning</code> 协议，并实现协议中的方法。在这个类中，将编写执行动画的代码，这个类被用做动画控制器。</li>
<li>在 <code>present</code> 控制器前，需设置一个类作为其转场代理。这个代理用于当 <code>present</code> 控制器时，从动画控制器中回调。</li>
<li>实现回调方法，返回一个第一步中的动画控制器实例对象。</li>
</ol>


<p>运行初始项目你会看到一组 items 的 tableView，在导航栏右边有一个 <code>Action</code> 按钮，当你点击它，会以默认 <code>modal</code> 样式从底部 <code>present</code> 出一个控制器，我们将为这个视图转场编写自定义转场。</p>

<p><img src="http://i1.tietuku.com/86214a9a01cf1d06.gif" alt="" /></p>

<h2>自定义 Present 转场</h2>

<p>如前所述，接下来做的第一件事是创建动画控制器。创建一个 <code>CustomPresentAnimationController</code> 类继承自 <code>NSObject</code>，并遵守 <code>UIViewControllerAnimatedTransitioning</code> 协议。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="nl">CustomPresentAnimationController</span><span class="p">:</span> <span class="bp">NSObject</span><span class="p">,</span> <span class="bp">UIViewControllerAnimatedTransitioning</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>UIViewControllerAnimatedTransitioning</code> 协议有两个必须实现的方法，在这个类中添加以下代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">动画持续时间</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="k">func</span> <span class="nf">transitionDuration</span><span class="p">(</span><span class="nl">transitionContext</span><span class="p">:</span> <span class="bp">UIViewControllerContextTransitioning</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">NSTimeInterval</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="mf">2.5</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">转场动画</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="k">func</span> <span class="n">animateTransition</span><span class="p">(</span><span class="nl">transitionContext</span><span class="p">:</span> <span class="bp">UIViewControllerContextTransitioning</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">fromViewController</span> <span class="o">=</span> <span class="n">transitionContext</span><span class="p">.</span><span class="n">viewControllerForKey</span><span class="p">(</span><span class="n">UITransitionContextFromViewControllerKey</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">toViewController</span> <span class="o">=</span> <span class="n">transitionContext</span><span class="p">.</span><span class="n">viewControllerForKey</span><span class="p">(</span><span class="n">UITransitionContextToViewControllerKey</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">finalFrameForVC</span> <span class="o">=</span> <span class="n">transitionContext</span><span class="p">.</span><span class="n">finalFrameForViewController</span><span class="p">(</span><span class="n">toViewController</span><span class="p">)</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">containerView</span> <span class="o">=</span> <span class="n">transitionContext</span><span class="p">.</span><span class="n">containerView</span><span class="p">()</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">bounds</span> <span class="o">=</span> <span class="bp">UIScreen</span><span class="p">.</span><span class="n">mainScreen</span><span class="p">().</span><span class="n">bounds</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 设置目标控制器的 frame</span>
</span><span class='line'>    <span class="n">toViewController</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">CGRectOffset</span><span class="p">(</span><span class="n">finalFrameForVC</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">bounds</span><span class="p">.</span><span class="n">height</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">// 将目标控制器的根 view 添加至容器视图 containerView</span>
</span><span class='line'>    <span class="n">containerView</span><span class="p">.</span><span class="n">addSubview</span><span class="p">(</span><span class="n">toViewController</span><span class="p">.</span><span class="n">view</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 设置动画代码</span>
</span><span class='line'>    <span class="bp">UIView</span><span class="p">.</span><span class="n">animateWithDuration</span><span class="p">(</span><span class="n">transitionDuration</span><span class="p">(</span><span class="n">transitionContext</span><span class="p">),</span> <span class="nl">delay</span><span class="p">:</span> <span class="mf">0.0</span><span class="p">,</span> <span class="nl">usingSpringWithDamping</span><span class="p">:</span> <span class="mf">0.5</span><span class="p">,</span> <span class="nl">initialSpringVelocity</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="n">UIViewAnimationOptions</span><span class="p">.</span><span class="n">CurveLinear</span><span class="p">,</span> <span class="nl">animations</span><span class="p">:</span> <span class="p">{</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">fromViewController</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.5</span>
</span><span class='line'>        <span class="n">toViewController</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">finalFrameForVC</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">})</span> <span class="p">{</span> <span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 动画结束后 通知转场上下文转场结束</span>
</span><span class='line'>        <span class="n">transitionContext</span><span class="p">.</span><span class="n">completeTransition</span><span class="p">(</span><span class="nb">true</span><span class="p">)</span>
</span><span class='line'>        <span class="n">fromViewController</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="mf">1.0</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>第一方法是设置转场<em>动画时长</em>，这个 Demo 中我们设置2.5秒，但是在实际应用中，你应该设置一个比这个数小的数。</p>

<p>第二个方法，我们通过转场上下文 <code>transitionContext</code> 取得<em>来源控制器</em> fromVC、<em>目标控制器</em> toVC、动画结束后终止 frame，以及给 fromVC 和 toVC 转场切换视图提供容器的<em>容器视图</em> <code>containerView</code>。</p>

<p>接下来我们设置 toView 在屏幕的底部，然后将 toView 添加至容器视图和动画的闭包中，让 toView 动画至设定的最终位置。同时也设置了 fromView 的透明度动画，以至于随着 toView 的向上滑动 fromView 逐渐淡出。动画时间通过 <code>transitionDuration(transitionContext)</code> 获得。在完成闭包中，我们通知转场上下文转场结束，接着让 fromView 的透明度恢复正常。容器视图将会移除 fromView。</p>

<p>动画控制器类里面的任务已经完成，下一步我们需要将它和 <code>storyboard segue</code> 连接起来。</p>

<p>打开 ItemsTableViewController.swift 文件，遵守 <code>UIViewControllerTransitioningDelegate</code> 协议。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="nl">ItemsTableViewController</span><span class="p">:</span> <span class="bp">UITableViewController</span><span class="p">,</span> <span class="bp">UIViewControllerTransitioningDelegate</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>UIViewController 有一个 <code>transitionDelegate</code> 属性，支持自定义转场。当转场至一个控制器时，会通过这个属性查看自定义转场是否使用。<code>UIViewControllerTransitioningDelegate</code> 提供自定义转场。</p>

<p>打开 Main.storyboard 文件，选择 <code>Present modally segue to Action View Controller</code>，在属性检查器中，设置它的 Identifier 为 <code>showAction</code>。</p>

<p><img src="http://i1.tietuku.com/f710e825b83b99be.png" alt="" /></p>

<p>回到 ItemsTableViewController.swift 文件，添加如下代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">/// 实例化一个 Present 动画控制器</span>
</span><span class='line'><span class="k">let</span> <span class="n">customPresentAnimationController</span> <span class="o">=</span> <span class="n">CustomPresentAnimationController</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="kr">override</span> <span class="k">func</span> <span class="n">prepareForSegue</span><span class="p">(</span><span class="nl">segue</span><span class="p">:</span> <span class="bp">UIStoryboardSegue</span><span class="p">,</span> <span class="nl">sender</span><span class="p">:</span> <span class="n">AnyObject</span><span class="o">?</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span>  <span class="n">segue</span><span class="p">.</span><span class="n">identifier</span> <span class="o">==</span> <span class="s">&quot;showAction&quot;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">toViewController</span> <span class="o">=</span> <span class="n">segue</span><span class="p">.</span><span class="n">destinationViewController</span> <span class="kt">as</span><span class="o">!</span> <span class="bp">UIViewController</span>
</span><span class='line'>        <span class="c1">// 设置目标控制器的转场代理为当前控制器</span>
</span><span class='line'>        <span class="n">toViewController</span><span class="p">.</span><span class="n">transitioningDelegate</span> <span class="o">=</span> <span class="nb">self</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这里我们实例化一个 Present 动画控制器，在 <code>prepareForSegue()</code> 函数中，设置目标控制器的 <code>transitioningDelegate</code> 属性。</p>

<p>继续添加如下代码，返回自定义 <code>Present</code> 动画控制器实例对象。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">返回自定义 Present 动画对象</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="k">func</span> <span class="n">animationControllerForPresentedController</span><span class="p">(</span><span class="nl">presented</span><span class="p">:</span> <span class="bp">UIViewController</span><span class="p">,</span> <span class="n">presentingController</span> <span class="nl">presenting</span><span class="p">:</span> <span class="bp">UIViewController</span><span class="p">,</span> <span class="n">sourceController</span> <span class="nl">source</span><span class="p">:</span> <span class="bp">UIViewController</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">UIViewControllerAnimatedTransitioning</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">customPresentAnimationController</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行程序，你会看到下图效果，Action view 在屏幕底部向上缓慢滑动，停止前会有小的弹簧效果。</p>

<p><img src="http://i1.tietuku.com/ca3edd567594f674.gif" alt="" /></p>

<p>在 CustomPresentAnimationController.swift 更改代码如下，你会看到一个稍微不同的效果，目标控制器的初始位置是在屏幕上方。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">toViewController</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">CGRectOffset</span><span class="p">(</span><span class="n">finalFrameForVC</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="n">bounds</span><span class="p">.</span><span class="n">height</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行程序，这次 Action view 是从屏幕顶部缓慢落下。</p>

<h2>自定义 Dismiss 转场</h2>

<p>我们已经实现了自定义 <code>present</code> 转场动画，但是 <code>dismiss</code> 转场动画还是使用的苹果默认的。</p>

<p><code>UIViewControllerTransitioningDelegate</code> 协议允许同时设置负责 <code>dismiss</code> 和 <code>present</code> 控制器的转场动画控制器。</p>

<p>创建一个 <code>CustomDismissAnimationController</code> 类，继承自 <code>NSObject</code>，并遵守 <code>UIViewControllerAnimatedTransitioning</code> 协议。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="nl">CustomDismissAnimationController</span><span class="p">:</span> <span class="bp">NSObject</span><span class="p">,</span> <span class="bp">UIViewControllerAnimatedTransitioning</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这个类添加如下代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">动画持续时间</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="k">func</span> <span class="nf">transitionDuration</span><span class="p">(</span><span class="nl">transitionContext</span><span class="p">:</span> <span class="bp">UIViewControllerContextTransitioning</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">NSTimeInterval</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="mf">2.0</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">转场动画</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="k">func</span> <span class="n">animateTransition</span><span class="p">(</span><span class="nl">transitionContext</span><span class="p">:</span> <span class="bp">UIViewControllerContextTransitioning</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">fromViewController</span> <span class="o">=</span> <span class="n">transitionContext</span><span class="p">.</span><span class="n">viewControllerForKey</span><span class="p">(</span><span class="n">UITransitionContextFromViewControllerKey</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">toViewController</span> <span class="o">=</span> <span class="n">transitionContext</span><span class="p">.</span><span class="n">viewControllerForKey</span><span class="p">(</span><span class="n">UITransitionContextToViewControllerKey</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">finalFrameForVC</span> <span class="o">=</span> <span class="n">transitionContext</span><span class="p">.</span><span class="n">finalFrameForViewController</span><span class="p">(</span><span class="n">toViewController</span><span class="p">)</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">containerView</span> <span class="o">=</span> <span class="n">transitionContext</span><span class="p">.</span><span class="n">containerView</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 设置 toVC 的根 view 的 frame 以及透明度</span>
</span><span class='line'>    <span class="n">toViewController</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">finalFrameForVC</span>
</span><span class='line'>    <span class="n">toViewController</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.5</span>
</span><span class='line'>    <span class="c1">// 将目标控制器的根 view 添加至容器视图 containerView</span>
</span><span class='line'>    <span class="n">containerView</span><span class="p">.</span><span class="n">addSubview</span><span class="p">(</span><span class="n">toViewController</span><span class="p">.</span><span class="n">view</span><span class="p">)</span>
</span><span class='line'>    <span class="n">containerView</span><span class="p">.</span><span class="n">sendSubviewToBack</span><span class="p">(</span><span class="n">toViewController</span><span class="p">.</span><span class="n">view</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 设置动画代码</span>
</span><span class='line'>    <span class="bp">UIView</span><span class="p">.</span><span class="n">animateWithDuration</span><span class="p">(</span><span class="n">transitionDuration</span><span class="p">(</span><span class="n">transitionContext</span><span class="p">),</span> <span class="nl">animations</span><span class="p">:</span> <span class="p">{</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">fromViewController</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">CGRectInset</span><span class="p">(</span><span class="n">fromViewController</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">,</span> <span class="n">fromViewController</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="n">fromViewController</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">height</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>        <span class="n">toViewController</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">})</span> <span class="p">{</span> <span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 动画结束后 通知转场上下文转场结束</span>
</span><span class='line'>        <span class="n">transitionContext</span><span class="p">.</span><span class="n">completeTransition</span><span class="p">(</span><span class="nb">true</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码和 <code>present</code> 转场动画代码实现方式很相似。在 <code>animateTransition()</code> 函数中，拿到当前转场上下文的 toVC 和 fromVC。现在的 toVC 是表视图控制器，我们设置了它的根视图的 alpha 值，动画开始后，将逐渐淡入。然后将 toVC 的根 view 添加至容器视图，并放在 fromVC 的根 view 的后面。</p>

<p>在动画闭包中，设置了 fromVC 的根 view 的宽和高动画到0，并保持在屏幕的中心，这会产生一个 from view 缩小到消失的动画效果，同时 to view 逐渐可见。</p>

<p>在 ItemsTableViewController.swift 文件中添加下面这个属性。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">/// 实例化一个负责 Dismiss 转场动画控制器</span>
</span><span class='line'><span class="k">let</span> <span class="n">customDismissAnimationController</span> <span class="o">=</span> <span class="n">CustomDismissAnimationController</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>同时实现下面这个代理方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">返回负责自定义 Dismiss 转场动画对象</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="k">func</span> <span class="n">animationControllerForDismissedController</span><span class="p">(</span><span class="nl">dismissed</span><span class="p">:</span> <span class="bp">UIViewController</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">UIViewControllerAnimatedTransitioning</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">customDismissAnimationController</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>UIViewControllerTransitioningDelegate</code> 协议提供了上面这个函数，可以设置负责 dismiss 转场动画的控制器。</p>

<p>运行程序，你会看到下面的动画。</p>

<p><img src="http://i1.tietuku.com/b42fc6619b716079.gif" alt="" /></p>

<p>显然，这并不是我们想要的动画。from view 的消失动画是我们想要的，但是图片 image 的相对位置没有变化。这是因为，我们改变的是 from view 的 frame，这并不会影响到它的子视图。我们将用 UIView 的快照 <code>snapshot</code> 来修复这个 bug。</p>

<p>UIView 快照是对当前存在的 UIView 截图让它成为一个轻量级的 UIView，我们将在动画中使用快照而不是真正的 view。</p>

<p>修改 <code>animateTransition()</code> 函数内部如下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">animateTransition</span><span class="p">(</span><span class="nl">transitionContext</span><span class="p">:</span> <span class="bp">UIViewControllerContextTransitioning</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">fromViewController</span> <span class="o">=</span> <span class="n">transitionContext</span><span class="p">.</span><span class="n">viewControllerForKey</span><span class="p">(</span><span class="n">UITransitionContextFromViewControllerKey</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">toViewController</span> <span class="o">=</span> <span class="n">transitionContext</span><span class="p">.</span><span class="n">viewControllerForKey</span><span class="p">(</span><span class="n">UITransitionContextToViewControllerKey</span><span class="p">)</span><span class="o">!</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">finalFrameForVC</span> <span class="o">=</span> <span class="n">transitionContext</span><span class="p">.</span><span class="n">finalFrameForViewController</span><span class="p">(</span><span class="n">toViewController</span><span class="p">)</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">containerView</span> <span class="o">=</span> <span class="n">transitionContext</span><span class="p">.</span><span class="n">containerView</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 设置 toVC 的根 view 的 frame 以及透明度</span>
</span><span class='line'>    <span class="n">toViewController</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">finalFrameForVC</span>
</span><span class='line'>    <span class="n">toViewController</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.5</span>
</span><span class='line'>    <span class="c1">// 将目标控制器的根 view 添加至容器视图 containerView</span>
</span><span class='line'>    <span class="n">containerView</span><span class="p">.</span><span class="n">addSubview</span><span class="p">(</span><span class="n">toViewController</span><span class="p">.</span><span class="n">view</span><span class="p">)</span>
</span><span class='line'>    <span class="n">containerView</span><span class="p">.</span><span class="n">sendSubviewToBack</span><span class="p">(</span><span class="n">toViewController</span><span class="p">.</span><span class="n">view</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 生成快照 并添加到容器视图</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">snapshotView</span> <span class="o">=</span> <span class="n">fromViewController</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">snapshotViewAfterScreenUpdates</span><span class="p">(</span><span class="nb">false</span><span class="p">)</span>
</span><span class='line'>    <span class="n">snapshotView</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">fromViewController</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span>
</span><span class='line'>    <span class="n">containerView</span><span class="p">.</span><span class="n">addSubview</span><span class="p">(</span><span class="n">snapshotView</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 移除 fromVC 的根 view</span>
</span><span class='line'>    <span class="n">fromViewController</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">removeFromSuperview</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 设置动画代码</span>
</span><span class='line'>    <span class="bp">UIView</span><span class="p">.</span><span class="n">animateWithDuration</span><span class="p">(</span><span class="n">transitionDuration</span><span class="p">(</span><span class="n">transitionContext</span><span class="p">),</span> <span class="nl">animations</span><span class="p">:</span> <span class="p">{</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">snapshotView</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">CGRectInset</span><span class="p">(</span><span class="n">fromViewController</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">,</span> <span class="n">fromViewController</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="n">fromViewController</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">height</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>        <span class="n">toViewController</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">})</span> <span class="p">{</span> <span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 动画结束后 通知转场上下文转场结束 并移除快照</span>
</span><span class='line'>        <span class="n">snapshotView</span><span class="p">.</span><span class="n">removeFromSuperview</span><span class="p">()</span>
</span><span class='line'>        <span class="n">transitionContext</span><span class="p">.</span><span class="n">completeTransition</span><span class="p">(</span><span class="nb">true</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里我们创建了一个 fromVC 的根 view 的快照，添加到容器视图，并移除 fromVC 的根 view。转场动画中缩放快照，动画完成后将快照从容器视图中移除。</p>

<p>运行程序，转场动画一切正常。</p>

<p><img src="http://i1.tietuku.com/c7d1a6eb3c4a7645.gif" alt="" /></p>

<p class='post-footer'>
            原始地址：
            <a href='http://lengmolehongyan.github.io/blog/2015/05/30/zi-ding-yi-zhuan-chang-dong-hua-jie-shao-fan-yi/'>http://lengmolehongyan.github.io/blog/2015/05/30/zi-ding-yi-zhuan-chang-dong-hua-jie-shao-fan-yi/</a><br/>
            written by <a href='http://lengmolehongyan.github.io'>冷漠叻荭颜</a>
            &nbsp;posted at <a href='http://lengmolehongyan.github.io'>http://lengmolehongyan.github.io</a>
            </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Xcode6中使用IBDesignable创建自定义控件(翻译)]]></title>
    <link href="http://lengmolehongyan.github.io/blog/2015/05/28/zai-xcode6zhong-shi-yong-ibdesignablechuang-jian-zi-ding-yi-kong-jian-fan-yi/"/>
    <updated>2015-05-28T00:16:31+08:00</updated>
    <id>http://lengmolehongyan.github.io/blog/2015/05/28/zai-xcode6zhong-shi-yong-ibdesignablechuang-jian-zi-ding-yi-kong-jian-fan-yi</id>
    <content type="html"><![CDATA[<p><a href="http://www.appcoda.com/ibdesignable-ibinspectable-tutorial/">英文原文地址</a></p>

<p>在Xcode的旧版本中，试图创建一个自定义控件，并不是很容易，因为在IB中，并不能实时预览到你的设计成果，只能在模拟器中测试。对于设计一个单一组件，可能需要花费大量时间。</p>

<p>Xcode6的发布，苹果为开发者构建自定义控件推出了新功能<strong>IBDesignable</strong>和<strong>IBInspectable</strong>，允许在IB中实时预览设计成果。很明显，这会给我们在实际开发过程中提高不少效率。</p>

<p>在本教程中，将介绍IBDesignable IBInspectable，以及展示如何利用这个新功能。除过创建demo示例没有更好地方式来阐述这一新特性，因此，创建一个"Rainbow"自定义界面。</p>

<!--more-->


<p><img src="http://i1.tietuku.com/a476b2f40c2465d0.png" alt="效果图" /></p>

<hr />

<h3>IBDesignable和IBInspectable</h3>

<p>使用IBDesignable和IBInspectable，开发者创建界面(或视图)可以实时呈现在IB中。一般来说，为了使用这个新特性，你需要做的是创建一个<code>UIView</code>或者<code>UIControl</code>的子类，然后在定义类的前面加上<code>@IBDesignable</code>关键字。如果是OC，使用<code>IB_DESIGNABLE</code>宏。下面是Swift示例代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="p">@</span><span class="n">IBDesignable</span>
</span><span class='line'><span class="k">class</span> <span class="nl">Rainbow</span><span class="p">:</span> <span class="bp">UIView</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在Xcode旧版本中，你可以在IB中编辑<code>User Defined Runtime Attributes</code>来改变一个对象的属性(例如:layer.cornerRadius)，问题是你需要确切知道属性名。<code>IBInspectable</code>只需要一步，对一个可视化类的属性前面加上<code>IBInspectable</code>关键字前缀，该属性会在暴露在IB中，这就是一个更改属性值更简单的方法。</p>

<p><img src="http://i1.tietuku.com/93c53c69c11bffa1.png" alt="IB属性" /></p>

<p>你如果使用Swift开发app，你需要做的只是在你选择的属性前面加上<code>@IBInspectable</code>关键字，下面是个示例代码片段:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="p">@</span><span class="n">IBInspectable</span> <span class="k">var</span> <span class="nl">firstColor</span><span class="p">:</span> <span class="bp">UIColor</span> <span class="o">=</span> <span class="bp">UIColor</span><span class="p">.</span><span class="n">blackColor</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>   <span class="c1">// 值改变时更新UI</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>创建Xcode项目</h3>

<p>创建一个新的Xcode项目，选择Single View Application模板，起名为<em>RainbowDemo</em>，在此项目中，将使用Swift语言，因此，创建项目时不要忘记勾选。</p>

<p>完成后，选择Main.storyboard文件，设置View Controller的根视图View的背景颜色Hex Color值为<code>38334C</code>(或者任何你想要的颜色)。然后从对象库中拖一个View放进View Controller，设置它的大小Width为600，Height为434，然后把它放在根视图的中心，设置新视图View和根视图相同背景颜色。</p>

<blockquote><p>提示：如果想改变RGB颜色值，只需打开调色板和切换到滑块标签来改变RGB值</p></blockquote>

<p><img src="http://i1.tietuku.com/ae13d9f742d52315.gif" alt="设置背景颜色" /></p>

<p>在Xcode6中，为了适配各个iOS设备，你必须为视图View配置自动布局约束。对于简单的约束，你可以在自动布局菜单单击<strong>Issues</strong>选项，选择<code>Add Missing Contraints</code>，Xcode将自动为View添加布局约束。</p>

<p><img src="http://i1.tietuku.com/7b993f7b47a011c2.gif" alt="添加约束" /></p>

<hr />

<h3>创建自定义View类</h3>

<p>现在，你已经在storyboard中创建了一个View，是时候创建自定义View类了。使用Cocoa Touch Class文件模板，创建自定义类文件，继承自UIView，起名为"Rainbow"。</p>

<p><img src="http://i1.tietuku.com/08e097c646676e6a.png" alt="创建自定义View类" /></p>

<p>在自定义类中插入以下代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nl">Rainbow</span><span class="p">:</span> <span class="bp">UIView</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">override</span> <span class="k">init</span><span class="p">(</span><span class="nl">frame</span><span class="p">:</span> <span class="bp">CGRect</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">.</span><span class="k">init</span><span class="p">(</span><span class="nl">frame</span><span class="p">:</span> <span class="n">frame</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">required</span> <span class="k">init</span><span class="p">(</span><span class="n">coder</span> <span class="nl">aDecoder</span><span class="p">:</span> <span class="bp">NSCoder</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">.</span><span class="k">init</span><span class="p">(</span><span class="nl">coder</span><span class="p">:</span> <span class="n">aDecoder</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如前所述，这个可视化类是UIView的子类，让自定义类实时呈现，需要<code>override</code>上述两个方法。然后，打开辅助编辑器，更改新拖的View的自定义类为<em>Rainbow</em>类。</p>

<p><img src="http://i1.tietuku.com/5e41283a3fd5d23c.gif" alt="" /></p>

<hr />

<h3>实现IBDesignable控制</h3>

<p>为了实现实时预览，在自定义类前面加一个前缀<code>@IBDesignable</code>关键字</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="p">@</span><span class="n">IBDesignable</span>
</span><span class='line'><span class="k">class</span> <span class="nl">Rainbow</span><span class="p">:</span> <span class="bp">UIView</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个关键字确实简单，但是这简单地关键字将使你的开发更加容易。接下来，添加一些设置颜色的属性。在Rainbow类中插入以下代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="p">@</span><span class="n">IBInspectable</span> <span class="k">var</span> <span class="nl">firstColor</span><span class="p">:</span> <span class="bp">UIColor</span> <span class="o">=</span> <span class="bp">UIColor</span><span class="p">(</span><span class="nl">red</span><span class="p">:</span> <span class="p">(</span><span class="mf">37.0</span><span class="o">/</span><span class="mf">255.0</span><span class="p">),</span> <span class="nl">green</span><span class="p">:</span> <span class="p">(</span><span class="mf">252.0</span><span class="o">/</span><span class="mi">255</span><span class="p">),</span> <span class="nl">blue</span><span class="p">:</span> <span class="p">(</span><span class="mf">244.0</span><span class="o">/</span><span class="mf">255.0</span><span class="p">),</span> <span class="nl">alpha</span><span class="p">:</span> <span class="mf">1.0</span><span class="p">)</span>
</span><span class='line'><span class="p">@</span><span class="n">IBInspectable</span> <span class="k">var</span> <span class="nl">secondColor</span><span class="p">:</span> <span class="bp">UIColor</span> <span class="o">=</span> <span class="bp">UIColor</span><span class="p">(</span><span class="nl">red</span><span class="p">:</span> <span class="p">(</span><span class="mf">171.0</span><span class="o">/</span><span class="mf">255.0</span><span class="p">),</span> <span class="nl">green</span><span class="p">:</span> <span class="p">(</span><span class="mf">250.0</span><span class="o">/</span><span class="mi">255</span><span class="p">),</span> <span class="nl">blue</span><span class="p">:</span> <span class="p">(</span><span class="mf">81.0</span><span class="o">/</span><span class="mf">255.0</span><span class="p">),</span> <span class="nl">alpha</span><span class="p">:</span> <span class="mf">1.0</span><span class="p">)</span>
</span><span class='line'><span class="p">@</span><span class="n">IBInspectable</span> <span class="k">var</span> <span class="nl">thirdColor</span><span class="p">:</span> <span class="bp">UIColor</span> <span class="o">=</span> <span class="bp">UIColor</span><span class="p">(</span><span class="nl">red</span><span class="p">:</span> <span class="p">(</span><span class="mf">238.0</span><span class="o">/</span><span class="mf">255.0</span><span class="p">),</span> <span class="nl">green</span><span class="p">:</span> <span class="p">(</span><span class="mf">32.0</span><span class="o">/</span><span class="mi">255</span><span class="p">),</span> <span class="nl">blue</span><span class="p">:</span> <span class="p">(</span><span class="mf">53.0</span><span class="o">/</span><span class="mf">255.0</span><span class="p">),</span> <span class="nl">alpha</span><span class="p">:</span> <span class="mf">1.0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这里，我们预先定义每个属性一个默认颜色，每次用户更改它们的值时会重绘视图。更重要的是，我们为每个属性加了一个<code>@IBInspectable</code>关键字前缀，现在去IB的属性检查器，你可以直观地发现这些属性:</p>

<p><img src="http://i1.tietuku.com/49ce99f08cfba0ab.png" alt="IB中的属性" /></p>

<p>很酷，对吧？IBInspectable通过指示属性，你可以使用颜色选择器可视化地编辑它们。</p>

<p>在Rainbow类中，为了在屏幕上画一个圆，插入以下代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">addOval</span><span class="p">(</span><span class="nl">lineWidth</span><span class="p">:</span> <span class="n">CGFloat</span><span class="p">,</span> <span class="nl">path</span><span class="p">:</span> <span class="n">CGPathRef</span><span class="p">,</span> <span class="nl">strokeStart</span><span class="p">:</span> <span class="n">CGFloat</span><span class="p">,</span> <span class="nl">strokeEnd</span><span class="p">:</span> <span class="n">CGFloat</span><span class="p">,</span> <span class="nl">strokeColor</span><span class="p">:</span> <span class="bp">UIColor</span><span class="p">,</span> <span class="nl">fillColor</span><span class="p">:</span> <span class="bp">UIColor</span><span class="p">,</span> <span class="nl">shadowRadius</span><span class="p">:</span> <span class="n">CGFloat</span><span class="p">,</span> <span class="nl">shadowOpacity</span><span class="p">:</span> <span class="n">Float</span><span class="p">,</span> <span class="nl">shadowOffset</span><span class="p">:</span> <span class="bp">CGSize</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">let</span> <span class="n">arc</span> <span class="o">=</span> <span class="bp">CAShapeLayer</span><span class="p">()</span>
</span><span class='line'>   <span class="n">arc</span><span class="p">.</span><span class="n">lineWidth</span> <span class="o">=</span> <span class="n">lineWidth</span>
</span><span class='line'>   <span class="n">arc</span><span class="p">.</span><span class="n">path</span> <span class="o">=</span> <span class="n">path</span>
</span><span class='line'>   <span class="n">arc</span><span class="p">.</span><span class="n">strokeStart</span> <span class="o">=</span> <span class="n">strokeStart</span>
</span><span class='line'>   <span class="n">arc</span><span class="p">.</span><span class="n">strokeEnd</span> <span class="o">=</span> <span class="n">strokeEnd</span>
</span><span class='line'>   <span class="n">arc</span><span class="p">.</span><span class="n">strokeColor</span> <span class="o">=</span> <span class="n">strokeColor</span><span class="p">.</span><span class="bp">CGColor</span>
</span><span class='line'>   <span class="n">arc</span><span class="p">.</span><span class="n">fillColor</span> <span class="o">=</span> <span class="n">fillColor</span><span class="p">.</span><span class="bp">CGColor</span>
</span><span class='line'>   <span class="n">arc</span><span class="p">.</span><span class="n">shadowRadius</span> <span class="o">=</span> <span class="n">shadowRadius</span>
</span><span class='line'>   <span class="n">arc</span><span class="p">.</span><span class="n">shadowOpacity</span> <span class="o">=</span> <span class="n">shadowOpacity</span>
</span><span class='line'>   <span class="n">arc</span><span class="p">.</span><span class="n">shadowOffset</span> <span class="o">=</span> <span class="n">shadowOffset</span>
</span><span class='line'>   <span class="n">layer</span><span class="p">.</span><span class="n">addSublayer</span><span class="p">(</span><span class="n">arc</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>为了保证代码的简洁和可读性，我们定义了依据方法调用者传入参数来绘制一个完整的圆或者半圆的公共方法。利用CAShapeLayer类可以很简单的画一个圆或圆弧。你可以使用strokeStart和strokeEnd属性控制渲染的开始和结束。通过改变strokeEnd的值在0.0到1.0之间，你可以绘制一个完整或者部分的圆。其余的属性是只是用于设置渲染颜色，阴影颜色等，在CAShaperLayer官方文档中可以查看更详细的所有可用属性。</p>

<p>接下来，添加以下方法:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="kr">override</span> <span class="k">func</span> <span class="nf">drawRect</span><span class="p">(</span><span class="nl">rect</span><span class="p">:</span> <span class="bp">CGRect</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 添加圆弧</span>
</span><span class='line'>    <span class="n">addCircle</span><span class="p">(</span><span class="mi">80</span><span class="p">,</span> <span class="nl">capRadius</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span> <span class="nl">color</span><span class="p">:</span> <span class="n">firstColor</span><span class="p">)</span>
</span><span class='line'>    <span class="n">addCircle</span><span class="p">(</span><span class="mi">150</span><span class="p">,</span> <span class="nl">capRadius</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span> <span class="nl">color</span><span class="p">:</span> <span class="n">secondColor</span><span class="p">)</span>
</span><span class='line'>    <span class="n">addCircle</span><span class="p">(</span><span class="mi">215</span><span class="p">,</span> <span class="nl">capRadius</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span> <span class="nl">color</span><span class="p">:</span> <span class="n">thirdColor</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="nf">addCircle</span><span class="p">(</span><span class="nl">arcRadius</span><span class="p">:</span> <span class="n">CGFloat</span><span class="p">,</span> <span class="nl">capRadius</span><span class="p">:</span> <span class="n">CGFloat</span><span class="p">,</span> <span class="nl">color</span><span class="p">:</span> <span class="bp">UIColor</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">x</span> <span class="o">=</span> <span class="n">CGRectGetMidX</span><span class="p">(</span><span class="n">bounds</span><span class="p">)</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">y</span> <span class="o">=</span> <span class="n">CGRectGetMidY</span><span class="p">(</span><span class="n">bounds</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 底部圆弧</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">pathBottom</span> <span class="o">=</span> <span class="bp">UIBezierPath</span><span class="p">(</span><span class="nl">ovalInRect</span><span class="p">:</span> <span class="n">CGRectMake</span><span class="p">((</span><span class="n">x</span> <span class="o">-</span> <span class="p">(</span><span class="n">arcRadius</span><span class="o">/</span><span class="mi">2</span><span class="p">)),</span>
</span><span class='line'>        <span class="p">(</span><span class="n">y</span> <span class="o">-</span> <span class="p">(</span><span class="n">arcRadius</span><span class="o">/</span><span class="mi">2</span><span class="p">)),</span> <span class="n">arcRadius</span><span class="p">,</span> <span class="n">arcRadius</span><span class="p">)).</span><span class="bp">CGPath</span>
</span><span class='line'>    <span class="n">addOval</span><span class="p">(</span><span class="mf">20.0</span><span class="p">,</span> <span class="nl">path</span><span class="p">:</span> <span class="n">pathBottom</span><span class="p">,</span> <span class="nl">strokeStart</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">strokeEnd</span><span class="p">:</span> <span class="mf">0.5</span><span class="p">,</span>
</span><span class='line'>        <span class="nl">strokeColor</span><span class="p">:</span> <span class="n">color</span><span class="p">,</span> <span class="nl">fillColor</span><span class="p">:</span> <span class="bp">UIColor</span><span class="p">.</span><span class="n">clearColor</span><span class="p">(),</span>
</span><span class='line'>        <span class="nl">shadowRadius</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">shadowOpacity</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">shadowOffset</span><span class="p">:</span> <span class="n">CGSizeZero</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 中间圆弧</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">pathMiddle</span> <span class="o">=</span> <span class="bp">UIBezierPath</span><span class="p">(</span><span class="nl">ovalInRect</span><span class="p">:</span> <span class="n">CGRectMake</span><span class="p">((</span><span class="n">x</span> <span class="o">-</span> <span class="p">(</span><span class="n">capRadius</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span> <span class="o">-</span> <span class="p">(</span><span class="n">arcRadius</span><span class="o">/</span><span class="mi">2</span><span class="p">),</span>
</span><span class='line'>        <span class="p">(</span><span class="n">y</span> <span class="o">-</span> <span class="p">(</span><span class="n">capRadius</span><span class="o">/</span><span class="mi">2</span><span class="p">)),</span> <span class="n">capRadius</span><span class="p">,</span> <span class="n">capRadius</span><span class="p">)).</span><span class="bp">CGPath</span>
</span><span class='line'>    <span class="n">addOval</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="nl">path</span><span class="p">:</span> <span class="n">pathMiddle</span><span class="p">,</span> <span class="nl">strokeStart</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">strokeEnd</span><span class="p">:</span> <span class="mf">1.0</span><span class="p">,</span>
</span><span class='line'>        <span class="nl">strokeColor</span><span class="p">:</span> <span class="n">color</span><span class="p">,</span> <span class="nl">fillColor</span><span class="p">:</span> <span class="n">color</span><span class="p">,</span>
</span><span class='line'>        <span class="nl">shadowRadius</span><span class="p">:</span> <span class="mf">5.0</span><span class="p">,</span> <span class="nl">shadowOpacity</span><span class="p">:</span> <span class="mf">0.5</span><span class="p">,</span> <span class="nl">shadowOffset</span><span class="p">:</span> <span class="n">CGSizeZero</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 顶部圆弧</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">pathTop</span> <span class="o">=</span> <span class="bp">UIBezierPath</span><span class="p">(</span><span class="nl">ovalInRect</span><span class="p">:</span> <span class="n">CGRectMake</span><span class="p">((</span><span class="n">x</span> <span class="o">-</span> <span class="p">(</span><span class="n">arcRadius</span><span class="o">/</span><span class="mi">2</span><span class="p">)),</span>
</span><span class='line'>        <span class="p">(</span><span class="n">y</span> <span class="o">-</span> <span class="p">(</span><span class="n">arcRadius</span><span class="o">/</span><span class="mi">2</span><span class="p">)),</span> <span class="n">arcRadius</span><span class="p">,</span> <span class="n">arcRadius</span><span class="p">)).</span><span class="bp">CGPath</span>
</span><span class='line'>    <span class="n">addOval</span><span class="p">(</span><span class="mf">20.0</span><span class="p">,</span> <span class="nl">path</span><span class="p">:</span> <span class="n">pathTop</span><span class="p">,</span> <span class="nl">strokeStart</span><span class="p">:</span> <span class="mf">0.5</span><span class="p">,</span> <span class="nl">strokeEnd</span><span class="p">:</span> <span class="mf">1.0</span><span class="p">,</span>
</span><span class='line'>        <span class="nl">strokeColor</span><span class="p">:</span> <span class="n">color</span><span class="p">,</span> <span class="nl">fillColor</span><span class="p">:</span> <span class="bp">UIColor</span><span class="p">.</span><span class="n">clearColor</span><span class="p">(),</span>
</span><span class='line'>        <span class="nl">shadowRadius</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">shadowOpacity</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">shadowOffset</span><span class="p">:</span> <span class="n">CGSizeZero</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>drawRect:</code>方法默认什么也不做，为了在自定义View中画圆，我们override此方法来实现自己的绘制代码。<code>addCircle:</code>方法有三个参数：arcRadius，capRadius和color。arcRadius是圆弧的半径，capRadius是圆弧边缘半径。</p>

<p><code>addCircle:</code>方法利用UIBezierPath画圆弧的简单工作原理:</p>

<ol>
<li>首先，在底部画了个半圆弧</li>
<li>接下来，在圆弧边缘画了一个完整的小圆</li>
<li>最后，画了另一半圆弧</li>
</ol>


<p>在<code>drawRect:</code>方法中，我们调用了<code>addCircle:</code>方法三次，传入的参数指定圆弧该怎样画：</p>

<p><img src="http://i1.tietuku.com/c5769f1b0ed47bd7.jpg" alt="画圆弧原理" /></p>

<p>利用IBInspectable属性，你可以在IB中自由改变每个圆弧的颜色，而不需要写代码:</p>

<p><img src="http://i1.tietuku.com/dac4b07c68953a6d.png" alt="" /></p>

<p>显然，你可以进一步利用<code>@IBInspectable</code>暴露<code>arcRadius</code>属性，便可以在IB中修改绘制圆弧半径。</p>

<p><img src="http://i1.tietuku.com/79c3c33c22943103.jpg" alt="修改半径" /></p>

<hr />

<h3>总结</h3>

<p>通过本教程后，你现在了解了在Xcode6中如何利用IBDesignable和IBInspectable实时预览界面。利用这个新特性，你可以更高效创建自定义组件。</p>

<p><a href="https://github.com/lengmolehongyan/RainbowDemo">RainbowDemo地址</a></p>

<p class='post-footer'>
            原始地址：
            <a href='http://lengmolehongyan.github.io/blog/2015/05/28/zai-xcode6zhong-shi-yong-ibdesignablechuang-jian-zi-ding-yi-kong-jian-fan-yi/'>http://lengmolehongyan.github.io/blog/2015/05/28/zai-xcode6zhong-shi-yong-ibdesignablechuang-jian-zi-ding-yi-kong-jian-fan-yi/</a><br/>
            written by <a href='http://lengmolehongyan.github.io'>冷漠叻荭颜</a>
            &nbsp;posted at <a href='http://lengmolehongyan.github.io'>http://lengmolehongyan.github.io</a>
            </p>

]]></content>
  </entry>
  
</feed>
